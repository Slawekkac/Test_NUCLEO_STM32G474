
Test_CAN_NG474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fec  08002fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff4  08002ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08003008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003008  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8ef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7f  00000000  00000000  0002e92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000066d3  00000000  00000000  000308aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000958  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001150  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000243b5  00000000  00000000  00038a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009968  00000000  00000000  0005cddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000e861e  00000000  00000000  00066745  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014ed63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b7c  00000000  00000000  0014ede0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f98 	.word	0x08002f98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002f98 	.word	0x08002f98

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2100      	movs	r1, #0
{
 800051c:	b0a9      	sub	sp, #164	; 0xa4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051e:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000520:	a805      	add	r0, sp, #20
 8000522:	2238      	movs	r2, #56	; 0x38
 8000524:	f002 fd30 	bl	8002f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	4621      	mov	r1, r4
 800052a:	2254      	movs	r2, #84	; 0x54
 800052c:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	e9cd 4400 	strd	r4, r4, [sp]
 8000532:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000536:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	f002 fd26 	bl	8002f88 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800053c:	4620      	mov	r0, r4
 800053e:	f000 ffbf 	bl	80014c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000542:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	2503      	movs	r5, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000550:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000552:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000556:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800055c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800055e:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000560:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f001 f82a 	bl	80015bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800056a:	2107      	movs	r1, #7
 800056c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	e9cd 5401 	strd	r5, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000578:	f001 fa72 	bl	8001a60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 800057c:	f44f 5281 	mov.w	r2, #4128	; 0x1020
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000586:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 8000588:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800058a:	9321      	str	r3, [sp, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	f001 fc32 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000590:	b029      	add	sp, #164	; 0xa4
 8000592:	bd30      	pop	{r4, r5, pc}

08000594 <main>:
{
 8000594:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	2700      	movs	r7, #0
{
 8000598:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800059a:	f000 fa15 	bl	80009c8 <HAL_Init>
  SystemClock_Config();
 800059e:	f7ff ffbb 	bl	8000518 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	e9cd 7706 	strd	r7, r7, [sp, #24]
 80005a6:	e9cd 7708 	strd	r7, r7, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <main+0x1d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	970a      	str	r7, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 80005b0:	4d6d      	ldr	r5, [pc, #436]	; (8000768 <main+0x1d4>)
  hfdcan1.Instance = FDCAN1;
 80005b2:	4c6e      	ldr	r4, [pc, #440]	; (800076c <main+0x1d8>)
 80005b4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8000788 <main+0x1f4>
 80005b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800078c <main+0x1f8>
 80005bc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000790 <main+0x1fc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	f042 0204 	orr.w	r2, r2, #4
 80005c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80005c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c8:	f002 0204 	and.w	r2, r2, #4
 80005cc:	9202      	str	r2, [sp, #8]
 80005ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d2:	f042 0220 	orr.w	r2, r2, #32
 80005d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80005d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005da:	f002 0220 	and.w	r2, r2, #32
 80005de:	9203      	str	r2, [sp, #12]
 80005e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e4:	f042 0201 	orr.w	r2, r2, #1
 80005e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	f002 0201 	and.w	r2, r2, #1
 80005f0:	9204      	str	r2, [sp, #16]
 80005f2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f6:	f042 0202 	orr.w	r2, r2, #2
 80005fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	463a      	mov	r2, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800060e:	f000 ff3d 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000612:	4b57      	ldr	r3, [pc, #348]	; (8000770 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	4857      	ldr	r0, [pc, #348]	; (8000774 <main+0x1e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = B1_Pin;
 8000618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	a906      	add	r1, sp, #24

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000624:	f000 fe56 	bl	80012d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000628:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062a:	a906      	add	r1, sp, #24
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	e9cd 7708 	strd	r7, r7, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000638:	f000 fe4c 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800063c:	463a      	mov	r2, r7
 800063e:	4639      	mov	r1, r7
 8000640:	2028      	movs	r0, #40	; 0x28
 8000642:	f000 fa0b 	bl	8000a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000646:	2028      	movs	r0, #40	; 0x28
 8000648:	f000 fa3e 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 115200;
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	230c      	movs	r3, #12
  hlpuart1.Instance = LPUART1;
 8000652:	4949      	ldr	r1, [pc, #292]	; (8000778 <main+0x1e4>)
  hlpuart1.Init.BaudRate = 115200;
 8000654:	606a      	str	r2, [r5, #4]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000656:	4628      	mov	r0, r5
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	616b      	str	r3, [r5, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	60af      	str	r7, [r5, #8]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800065c:	e9c5 7703 	strd	r7, r7, [r5, #12]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000660:	61af      	str	r7, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	622f      	str	r7, [r5, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	62af      	str	r7, [r5, #40]	; 0x28
  hlpuart1.Instance = LPUART1;
 8000666:	6029      	str	r1, [r5, #0]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000668:	f001 fda6 	bl	80021b8 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066c:	4639      	mov	r1, r7
 800066e:	4628      	mov	r0, r5
 8000670:	f002 fbc2 	bl	8002df8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000674:	4639      	mov	r1, r7
 8000676:	4628      	mov	r0, r5
 8000678:	f002 fc10 	bl	8002e9c <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800067c:	4628      	mov	r0, r5
 800067e:	f002 fb9d 	bl	8002dbc <HAL_UARTEx_DisableFifoMode>
  hfdcan1.Instance = FDCAN1;
 8000682:	493e      	ldr	r1, [pc, #248]	; (800077c <main+0x1e8>)
 8000684:	6021      	str	r1, [r4, #0]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8000686:	223f      	movs	r2, #63	; 0x3f
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000688:	2310      	movs	r3, #16
  hfdcan1.Init.NominalPrescaler = 2;
 800068a:	2502      	movs	r5, #2
  hfdcan1.Init.DataPrescaler = 8;
 800068c:	2108      	movs	r1, #8
  hfdcan1.Init.NominalTimeSeg1 = 63;
 800068e:	61e2      	str	r2, [r4, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000690:	6223      	str	r3, [r4, #32]
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000692:	2205      	movs	r2, #5
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000694:	2304      	movs	r3, #4
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000696:	4620      	mov	r0, r4
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000698:	e9c4 670d 	strd	r6, r7, [r4, #52]	; 0x34
  hfdcan1.Init.DataTimeSeg2 = 4;
 800069c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006a0:	6067      	str	r7, [r4, #4]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006a2:	e9c4 7702 	strd	r7, r7, [r4, #8]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006a6:	7426      	strb	r6, [r4, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80006a8:	7466      	strb	r6, [r4, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006aa:	74a7      	strb	r7, [r4, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006ac:	61a6      	str	r6, [r4, #24]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006ae:	62a6      	str	r6, [r4, #40]	; 0x28
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006b0:	63e7      	str	r7, [r4, #60]	; 0x3c
  hfdcan1.Init.DataPrescaler = 8;
 80006b2:	6261      	str	r1, [r4, #36]	; 0x24
  hfdcan1.Init.NominalPrescaler = 2;
 80006b4:	6165      	str	r5, [r4, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006b6:	f000 fa2f 	bl	8000b18 <HAL_FDCAN_Init>
	sFilterConfig.FilterID1 = 0x321;
 80006ba:	f240 3221 	movw	r2, #801	; 0x321
	sFilterConfig.FilterID2 = 0x7FF;
 80006be:	f240 73ff 	movw	r3, #2047	; 0x7ff
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80006c2:	a906      	add	r1, sp, #24
 80006c4:	4620      	mov	r0, r4
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006c6:	e9cd 5608 	strd	r5, r6, [sp, #32]
	sFilterConfig.FilterID2 = 0x7FF;
 80006ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	sFilterConfig.FilterIndex = 0;
 80006ce:	e9cd 7706 	strd	r7, r7, [sp, #24]
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80006d2:	f000 fb67 	bl	8000da4 <HAL_FDCAN_ConfigFilter>
	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	462a      	mov	r2, r5
 80006da:	4629      	mov	r1, r5
 80006dc:	9700      	str	r7, [sp, #0]
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 fb8c 	bl	8000dfc <HAL_FDCAN_ConfigGlobalFilter>
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80006e4:	4620      	mov	r0, r4
	TxHeader.Identifier = 0x123;
 80006e6:	4d26      	ldr	r5, [pc, #152]	; (8000780 <main+0x1ec>)
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80006e8:	f000 fba8 	bl	8000e3c <HAL_FDCAN_Start>
	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ec:	463a      	mov	r2, r7
 80006ee:	4631      	mov	r1, r6
 80006f0:	4620      	mov	r0, r4
 80006f2:	4e24      	ldr	r6, [pc, #144]	; (8000784 <main+0x1f0>)
 80006f4:	f000 fc9a 	bl	800102c <HAL_FDCAN_ActivateNotification>
	TxHeader.Identifier = 0x123;
 80006f8:	f240 1223 	movw	r2, #291	; 0x123
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000700:	606f      	str	r7, [r5, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000702:	60af      	str	r7, [r5, #8]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000704:	e9c5 7704 	strd	r7, r7, [r5, #16]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000708:	e9c5 7706 	strd	r7, r7, [r5, #24]
	TxHeader.MessageMarker = 0;
 800070c:	622f      	str	r7, [r5, #32]
	TxHeader.Identifier = 0x123;
 800070e:	602a      	str	r2, [r5, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000710:	60eb      	str	r3, [r5, #12]
		  myState = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8000712:	4637      	mov	r7, r6
	  my_Data_Can++;
 8000714:	f8da 3000 	ldr.w	r3, [sl]
	  myTxData[0] = my_Data_Can;
 8000718:	2200      	movs	r2, #0
	  my_Data_Can++;
 800071a:	3301      	adds	r3, #1
	  myTxData[1] = my_Data_Can >> 8;
 800071c:	0a19      	lsrs	r1, r3, #8
	  myTxData[0] = my_Data_Can;
 800071e:	f363 0207 	bfi	r2, r3, #0, #8
 8000722:	f361 220f 	bfi	r2, r1, #8, #8
	  myTxData[2] = my_Data_Can >> 16;
 8000726:	0c19      	lsrs	r1, r3, #16
	  myTxData[0] = my_Data_Can;
 8000728:	f361 4217 	bfi	r2, r1, #16, #8
	  myTxData[3] = my_Data_Can >> 24;
 800072c:	0e19      	lsrs	r1, r3, #24
	  myTxData[0] = my_Data_Can;
 800072e:	f361 621f 	bfi	r2, r1, #24, #8
 8000732:	6032      	str	r2, [r6, #0]
	  myCanState = HAL_FDCAN_GetState(&hfdcan1);
 8000734:	4620      	mov	r0, r4
	  my_Data_Can++;
 8000736:	f8ca 3000 	str.w	r3, [sl]
	  myCanState = HAL_FDCAN_GetState(&hfdcan1);
 800073a:	f000 fdc7 	bl	80012cc <HAL_FDCAN_GetState>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800073e:	2120      	movs	r1, #32
	  myCanState = HAL_FDCAN_GetState(&hfdcan1);
 8000740:	f889 0000 	strb.w	r0, [r9]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 fea6 	bl	8001498 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f961 	bl	8000a14 <HAL_Delay>
		  myState = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8000752:	463a      	mov	r2, r7
 8000754:	4629      	mov	r1, r5
 8000756:	4620      	mov	r0, r4
 8000758:	f000 fb88 	bl	8000e6c <HAL_FDCAN_AddMessageToTxFifoQ>
 800075c:	f888 0000 	strb.w	r0, [r8]
 8000760:	e7d8      	b.n	8000714 <main+0x180>
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	20000034 	.word	0x20000034
 800076c:	200000c0 	.word	0x200000c0
 8000770:	10110000 	.word	0x10110000
 8000774:	48000800 	.word	0x48000800
 8000778:	40008000 	.word	0x40008000
 800077c:	40006400 	.word	0x40006400
 8000780:	2000012c 	.word	0x2000012c
 8000784:	2000002c 	.word	0x2000002c
 8000788:	20000178 	.word	0x20000178
 800078c:	20000029 	.word	0x20000029
 8000790:	20000028 	.word	0x20000028

08000794 <HAL_FDCAN_RxFifo0Callback>:
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000794:	07ca      	lsls	r2, r1, #31
 8000796:	d400      	bmi.n	800079a <HAL_FDCAN_RxFifo0Callback+0x6>
 8000798:	4770      	bx	lr
{
 800079a:	b508      	push	{r3, lr}
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_FDCAN_RxFifo0Callback+0x20>)
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <HAL_FDCAN_RxFifo0Callback+0x24>)
 80007a2:	f000 fbcb 	bl	8000f3c <HAL_FDCAN_GetRxMessage>
    {
    Error_Handler();
    }
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a6:	2120      	movs	r1, #32
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      //LED_Display(RxData[0]);
      //ubKeyNumber = RxData[0];
    }
  }
}
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b0:	f000 be72 	b.w	8001498 <HAL_GPIO_TogglePin>
 80007b4:	20000124 	.word	0x20000124
 80007b8:	20000150 	.word	0x20000150

080007bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_MspInit+0x38>)
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80007be:	490e      	ldr	r1, [pc, #56]	; (80007f8 <HAL_MspInit+0x3c>)
 80007c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c2:	f042 0201 	orr.w	r2, r2, #1
 80007c6:	661a      	str	r2, [r3, #96]	; 0x60
 80007c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80007ca:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	f002 0201 	and.w	r2, r2, #1
 80007d0:	9200      	str	r2, [sp, #0]
 80007d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007da:	659a      	str	r2, [r3, #88]	; 0x58
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	9b01      	ldr	r3, [sp, #4]
 80007e6:	688b      	ldr	r3, [r1, #8]
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	608b      	str	r3, [r1, #8]
  LL_PWR_DisableDeadBatteryPD();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	b002      	add	sp, #8
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40007000 	.word	0x40007000

080007fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007fc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 80007fe:	6802      	ldr	r2, [r0, #0]
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_FDCAN_MspInit+0x70>)
{
 8000802:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 8000806:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800080c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000810:	9407      	str	r4, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 8000812:	d001      	beq.n	8000818 <HAL_FDCAN_MspInit+0x1c>
        HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000814:	b008      	add	sp, #32
 8000816:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000818:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	a903      	add	r1, sp, #12
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800081e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000820:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000824:	659a      	str	r2, [r3, #88]	; 0x58
 8000826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000828:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	64da      	str	r2, [r3, #76]	; 0x4c
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000842:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000844:	f44f 55c0 	mov.w	r5, #6144	; 0x1800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800084c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	e9cd 5203 	strd	r5, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f000 fd3e 	bl	80012d4 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000858:	4622      	mov	r2, r4
 800085a:	4621      	mov	r1, r4
 800085c:	2015      	movs	r0, #21
 800085e:	f000 f8fd 	bl	8000a5c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000862:	2015      	movs	r0, #21
 8000864:	f000 f930 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
}
 8000868:	b008      	add	sp, #32
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	40006400 	.word	0x40006400

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==LPUART1)
 8000872:	6801      	ldr	r1, [r0, #0]
 8000874:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0x60>)
{
 8000876:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2300      	movs	r3, #0
  if(huart->Instance==LPUART1)
 800087a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000880:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000884:	9307      	str	r3, [sp, #28]
  if(huart->Instance==LPUART1)
 8000886:	d001      	beq.n	800088c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000888:	b008      	add	sp, #32
 800088a:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800088c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000890:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	a903      	add	r1, sp, #12
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000898:	f042 0201 	orr.w	r2, r2, #1
 800089c:	65da      	str	r2, [r3, #92]	; 0x5c
 800089e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008a0:	f002 0201 	and.w	r2, r2, #1
 80008a4:	9201      	str	r2, [sp, #4]
 80008a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008aa:	f042 0201 	orr.w	r2, r2, #1
 80008ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008ba:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f000 fd04 	bl	80012d4 <HAL_GPIO_Init>
}
 80008cc:	b008      	add	sp, #32
 80008ce:	bd10      	pop	{r4, pc}
 80008d0:	40008000 	.word	0x40008000

080008d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	e7fe      	b.n	80008d8 <HardFault_Handler>
 80008da:	bf00      	nop

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler>
 80008de:	bf00      	nop

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	e7fe      	b.n	80008e0 <BusFault_Handler>
 80008e2:	bf00      	nop

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler>
 80008e6:	bf00      	nop

080008e8 <SVC_Handler>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <DebugMon_Handler>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <PendSV_Handler>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 b87c 	b.w	80009f0 <HAL_IncTick>

080008f8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008fc:	f000 bdd4 	b.w	80014a8 <HAL_GPIO_EXTI_IRQHandler>

08000900 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000900:	4801      	ldr	r0, [pc, #4]	; (8000908 <FDCAN1_IT0_IRQHandler+0x8>)
 8000902:	f000 bc19 	b.w	8001138 <HAL_FDCAN_IRQHandler>
 8000906:	bf00      	nop
 8000908:	200000c0 	.word	0x200000c0

0800090c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SystemInit+0x18>)
 800090e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000912:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000916:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800091a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800091e:	6099      	str	r1, [r3, #8]
#endif
}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff ffdb 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 faf3 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fe1b 	bl	8000594 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08002ffc 	.word	0x08002ffc
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	20000180 	.word	0x20000180

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_InitTick+0x40>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b90b      	cbnz	r3, 8000988 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000984:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000986:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000988:	490d      	ldr	r1, [pc, #52]	; (80009c0 <HAL_InitTick+0x44>)
 800098a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098e:	4605      	mov	r5, r0
 8000990:	fbb2 f3f3 	udiv	r3, r2, r3
 8000994:	6808      	ldr	r0, [r1, #0]
 8000996:	fbb0 f0f3 	udiv	r0, r0, r3
 800099a:	f000 f8a3 	bl	8000ae4 <HAL_SYSTICK_Config>
 800099e:	4604      	mov	r4, r0
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1ef      	bne.n	8000984 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	2d0f      	cmp	r5, #15
 80009a6:	d8ed      	bhi.n	8000984 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	4602      	mov	r2, r0
 80009aa:	4629      	mov	r1, r5
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f854 	bl	8000a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_InitTick+0x48>)
 80009b6:	4620      	mov	r0, r4
 80009b8:	601d      	str	r5, [r3, #0]
}
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	20000004 	.word	0x20000004
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008

080009c8 <HAL_Init>:
{
 80009c8:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ca:	2003      	movs	r0, #3
{
 80009cc:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ce:	f000 f833 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ffd2 	bl	800097c <HAL_InitTick>
 80009d8:	b118      	cbz	r0, 80009e2 <HAL_Init+0x1a>
    status = HAL_ERROR;
 80009da:	2001      	movs	r0, #1
}
 80009dc:	b003      	add	sp, #12
 80009de:	f85d fb04 	ldr.w	pc, [sp], #4
 80009e2:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 80009e4:	f7ff feea 	bl	80007bc <HAL_MspInit>
 80009e8:	9801      	ldr	r0, [sp, #4]
}
 80009ea:	b003      	add	sp, #12
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4

080009f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <HAL_IncTick+0x10>)
 80009f2:	4904      	ldr	r1, [pc, #16]	; (8000a04 <HAL_IncTick+0x14>)
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	6809      	ldr	r1, [r1, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000017c 	.word	0x2000017c
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_GetTick+0x8>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	2000017c 	.word	0x2000017c

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff6 	bl	8000a08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000a1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000a20:	d002      	beq.n	8000a28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_Delay+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	1b40      	subs	r0, r0, r5
 8000a2e:	42a0      	cmp	r0, r4
 8000a30:	d3fa      	bcc.n	8000a28 <HAL_Delay+0x14>
  {
  }
}
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000a40:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a42:	0200      	lsls	r0, r0, #8
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a50:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a52:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_NVIC_SetPriority+0x64>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a66:	f1c3 0507 	rsb	r5, r3, #7
 8000a6a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	bf28      	it	cs
 8000a72:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a74:	2c06      	cmp	r4, #6
 8000a76:	d919      	bls.n	8000aac <HAL_NVIC_SetPriority+0x50>
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8000a7e:	409c      	lsls	r4, r3
 8000a80:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	40aa      	lsls	r2, r5
 8000a8a:	ea21 0102 	bic.w	r1, r1, r2
 8000a8e:	fa01 f203 	lsl.w	r2, r1, r3
 8000a92:	4322      	orrs	r2, r4
 8000a94:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000a96:	2800      	cmp	r0, #0
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	db0a      	blt.n	8000ab2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000aa0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000aa4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000aa8:	bc30      	pop	{r4, r5}
 8000aaa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aac:	2400      	movs	r4, #0
 8000aae:	4623      	mov	r3, r4
 8000ab0:	e7e8      	b.n	8000a84 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_NVIC_SetPriority+0x68>)
 8000ab4:	f000 000f 	and.w	r0, r0, #15
 8000ab8:	4403      	add	r3, r0
 8000aba:	761a      	strb	r2, [r3, #24]
 8000abc:	bc30      	pop	{r4, r5}
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	e000ecfc 	.word	0xe000ecfc

08000ac8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	db07      	blt.n	8000adc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000acc:	f000 011f 	and.w	r1, r0, #31
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	0940      	lsrs	r0, r0, #5
 8000ad4:	4a02      	ldr	r2, [pc, #8]	; (8000ae0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d20e      	bcs.n	8000b0a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	4c08      	ldr	r4, [pc, #32]	; (8000b14 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	20f0      	movs	r0, #240	; 0xf0
 8000af6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	f000 8100 	beq.w	8000d1e <HAL_FDCAN_Init+0x206>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b1e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8000b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80f1 	beq.w	8000d14 <HAL_FDCAN_Init+0x1fc>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b32:	6822      	ldr	r2, [r4, #0]
 8000b34:	6993      	ldr	r3, [r2, #24]
 8000b36:	f023 0310 	bic.w	r3, r3, #16
 8000b3a:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3c:	f7ff ff64 	bl	8000a08 <HAL_GetTick>
 8000b40:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b42:	e005      	b.n	8000b50 <HAL_FDCAN_Init+0x38>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b44:	f7ff ff60 	bl	8000a08 <HAL_GetTick>
 8000b48:	1b40      	subs	r0, r0, r5
 8000b4a:	280a      	cmp	r0, #10
 8000b4c:	f200 80d8 	bhi.w	8000d00 <HAL_FDCAN_Init+0x1e8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	0712      	lsls	r2, r2, #28
 8000b56:	d4f5      	bmi.n	8000b44 <HAL_FDCAN_Init+0x2c>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	f042 0201 	orr.w	r2, r2, #1
 8000b5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b60:	f7ff ff52 	bl	8000a08 <HAL_GetTick>
 8000b64:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b66:	e005      	b.n	8000b74 <HAL_FDCAN_Init+0x5c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b68:	f7ff ff4e 	bl	8000a08 <HAL_GetTick>
 8000b6c:	1b40      	subs	r0, r0, r5
 8000b6e:	280a      	cmp	r0, #10
 8000b70:	f200 80c6 	bhi.w	8000d00 <HAL_FDCAN_Init+0x1e8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	698b      	ldr	r3, [r1, #24]
 8000b78:	07db      	lsls	r3, r3, #31
 8000b7a:	d5f5      	bpl.n	8000b68 <HAL_FDCAN_Init+0x50>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b7c:	698b      	ldr	r3, [r1, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b7e:	4a75      	ldr	r2, [pc, #468]	; (8000d54 <HAL_FDCAN_Init+0x23c>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b80:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8000b84:	4291      	cmp	r1, r2
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b86:	618b      	str	r3, [r1, #24]
  if (hfdcan->Instance == FDCAN1)
 8000b88:	f000 80db 	beq.w	8000d42 <HAL_FDCAN_Init+0x22a>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000b8c:	7c23      	ldrb	r3, [r4, #16]
 8000b8e:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b90:	698b      	ldr	r3, [r1, #24]
 8000b92:	bf0c      	ite	eq
 8000b94:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b98:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8000b9c:	618b      	str	r3, [r1, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000b9e:	7c63      	ldrb	r3, [r4, #17]
 8000ba0:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ba2:	698b      	ldr	r3, [r1, #24]
 8000ba4:	bf0c      	ite	eq
 8000ba6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000baa:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8000bae:	618b      	str	r3, [r1, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000bb0:	7ca3      	ldrb	r3, [r4, #18]
 8000bb2:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000bb4:	698b      	ldr	r3, [r1, #24]
 8000bb6:	bf0c      	ite	eq
 8000bb8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000bbc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000bc0:	618b      	str	r3, [r1, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000bc2:	698b      	ldr	r3, [r1, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000bc4:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bcc:	432b      	orrs	r3, r5
 8000bce:	618b      	str	r3, [r1, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000bd0:	698b      	ldr	r3, [r1, #24]
 8000bd2:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8000bd6:	618b      	str	r3, [r1, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bd8:	690b      	ldr	r3, [r1, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000bda:	2a01      	cmp	r2, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bdc:	f023 0310 	bic.w	r3, r3, #16
 8000be0:	610b      	str	r3, [r1, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000be2:	f000 809e 	beq.w	8000d22 <HAL_FDCAN_Init+0x20a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000be6:	b182      	cbz	r2, 8000c0a <HAL_FDCAN_Init+0xf2>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000be8:	2a02      	cmp	r2, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000bea:	698b      	ldr	r3, [r1, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000bec:	f000 80ad 	beq.w	8000d4a <HAL_FDCAN_Init+0x232>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	618b      	str	r3, [r1, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bf6:	690b      	ldr	r3, [r1, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000bf8:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	610b      	str	r3, [r1, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000c00:	d103      	bne.n	8000c0a <HAL_FDCAN_Init+0xf2>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c02:	698b      	ldr	r3, [r1, #24]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	618b      	str	r3, [r1, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c0a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c0e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c10:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c12:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c14:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c16:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000c1a:	6962      	ldr	r2, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c1c:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c1e:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000c20:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000c26:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c2a:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000c2c:	d10e      	bne.n	8000c4c <HAL_FDCAN_Init+0x134>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c2e:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c32:	e9d4 2009 	ldrd	r2, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c36:	3b01      	subs	r3, #1
 8000c38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c3a:	3d01      	subs	r5, #1
 8000c3c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c40:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c42:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c44:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c4a:	60cb      	str	r3, [r1, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c4c:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8000c50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000c52:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_FDCAN_Init+0x240>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c54:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8000c56:	4291      	cmp	r1, r2
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c58:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8000c5c:	d066      	beq.n	8000d2c <HAL_FDCAN_Init+0x214>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8000c5e:	4e3f      	ldr	r6, [pc, #252]	; (8000d5c <HAL_FDCAN_Init+0x244>)
 8000c60:	f8df e120 	ldr.w	lr, [pc, #288]	; 8000d84 <HAL_FDCAN_Init+0x26c>
 8000c64:	483e      	ldr	r0, [pc, #248]	; (8000d60 <HAL_FDCAN_Init+0x248>)
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <HAL_FDCAN_Init+0x24c>)
 8000c68:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8000d88 <HAL_FDCAN_Init+0x270>
 8000c6c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000d8c <HAL_FDCAN_Init+0x274>
 8000c70:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8000d90 <HAL_FDCAN_Init+0x278>
 8000c74:	4d3c      	ldr	r5, [pc, #240]	; (8000d68 <HAL_FDCAN_Init+0x250>)
 8000c76:	4f3d      	ldr	r7, [pc, #244]	; (8000d6c <HAL_FDCAN_Init+0x254>)
 8000c78:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8000d94 <HAL_FDCAN_Init+0x27c>
 8000c7c:	42b1      	cmp	r1, r6
 8000c7e:	f502 428a 	add.w	r2, r2, #17664	; 0x4500
 8000c82:	f506 566d 	add.w	r6, r6, #15168	; 0x3b40
 8000c86:	f102 0218 	add.w	r2, r2, #24
 8000c8a:	f106 0610 	add.w	r6, r6, #16
 8000c8e:	bf1c      	itt	ne
 8000c90:	46f4      	movne	ip, lr
 8000c92:	4686      	movne	lr, r0
 8000c94:	f1a0 00b0 	sub.w	r0, r0, #176	; 0xb0
 8000c98:	bf04      	itt	eq
 8000c9a:	4615      	moveq	r5, r2
 8000c9c:	469e      	moveq	lr, r3
 8000c9e:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8000ca2:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	4657      	movne	r7, sl
 8000caa:	46c8      	movne	r8, r9
 8000cac:	4632      	movne	r2, r6
 8000cae:	4603      	movne	r3, r0

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000cb0:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 8000cb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000cb6:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000cb8:	f426 16f8 	bic.w	r6, r6, #2031616	; 0x1f0000
 8000cbc:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8000cc0:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000cc4:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 8000cc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000cca:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000cce:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8000cd2:	ea40 6006 	orr.w	r0, r0, r6, lsl #24

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cd6:	4293      	cmp	r3, r2
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000cd8:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000cdc:	e9c4 ec12 	strd	lr, ip, [r4, #72]	; 0x48
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000ce0:	e9c4 7514 	strd	r7, r5, [r4, #80]	; 0x50
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000ce4:	d204      	bcs.n	8000cf0 <HAL_FDCAN_Init+0x1d8>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d3fb      	bcc.n	8000ce8 <HAL_FDCAN_Init+0x1d0>
  hfdcan->LatestTxFifoQRequest = 0U;
 8000cf0:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000cf2:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000cf4:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->LatestTxFifoQRequest = 0U;
 8000cf6:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000cf8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d00:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d02:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 8000d0a:	2001      	movs	r0, #1
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d0c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8000d14:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8000d18:	f7ff fd70 	bl	80007fc <HAL_FDCAN_MspInit>
 8000d1c:	e709      	b.n	8000b32 <HAL_FDCAN_Init+0x1a>
    return HAL_ERROR;
 8000d1e:	2001      	movs	r0, #1
}
 8000d20:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d22:	698b      	ldr	r3, [r1, #24]
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	618b      	str	r3, [r1, #24]
 8000d2a:	e76e      	b.n	8000c0a <HAL_FDCAN_Init+0xf2>
  if (hfdcan->Instance == FDCAN2)
 8000d2c:	4d10      	ldr	r5, [pc, #64]	; (8000d70 <HAL_FDCAN_Init+0x258>)
 8000d2e:	4f11      	ldr	r7, [pc, #68]	; (8000d74 <HAL_FDCAN_Init+0x25c>)
 8000d30:	f8df c064 	ldr.w	ip, [pc, #100]	; 8000d98 <HAL_FDCAN_Init+0x280>
 8000d34:	f8df e064 	ldr.w	lr, [pc, #100]	; 8000d9c <HAL_FDCAN_Init+0x284>
 8000d38:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000da0 <HAL_FDCAN_Init+0x288>
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_FDCAN_Init+0x260>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_FDCAN_Init+0x264>)
 8000d40:	e7b6      	b.n	8000cb0 <HAL_FDCAN_Init+0x198>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_FDCAN_Init+0x268>)
 8000d44:	6862      	ldr	r2, [r4, #4]
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e720      	b.n	8000b8c <HAL_FDCAN_Init+0x74>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	618b      	str	r3, [r1, #24]
 8000d50:	e75b      	b.n	8000c0a <HAL_FDCAN_Init+0xf2>
 8000d52:	bf00      	nop
 8000d54:	40006400 	.word	0x40006400
 8000d58:	40006800 	.word	0x40006800
 8000d5c:	40006c00 	.word	0x40006c00
 8000d60:	4000a4b0 	.word	0x4000a4b0
 8000d64:	4000ab50 	.word	0x4000ab50
 8000d68:	4000a678 	.word	0x4000a678
 8000d6c:	4000ad00 	.word	0x4000ad00
 8000d70:	4000a9c8 	.word	0x4000a9c8
 8000d74:	4000a9b0 	.word	0x4000a9b0
 8000d78:	4000aaa0 	.word	0x4000aaa0
 8000d7c:	4000a750 	.word	0x4000a750
 8000d80:	40006500 	.word	0x40006500
 8000d84:	4000a588 	.word	0x4000a588
 8000d88:	4000a660 	.word	0x4000a660
 8000d8c:	4000a470 	.word	0x4000a470
 8000d90:	4000ac28 	.word	0x4000ac28
 8000d94:	4000ab10 	.word	0x4000ab10
 8000d98:	4000a8d8 	.word	0x4000a8d8
 8000d9c:	4000a800 	.word	0x4000a800
 8000da0:	4000a7c0 	.word	0x4000a7c0

08000da4 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000da4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000da8:	3b01      	subs	r3, #1
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d905      	bls.n	8000dba <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000dae:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
}
 8000db8:	4770      	bx	lr
 8000dba:	688a      	ldr	r2, [r1, #8]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000dbc:	680b      	ldr	r3, [r1, #0]
{
 8000dbe:	b4f0      	push	{r4, r5, r6, r7}
 8000dc0:	0792      	lsls	r2, r2, #30
 8000dc2:	e9d1 6403 	ldrd	r6, r4, [r1, #12]
 8000dc6:	694d      	ldr	r5, [r1, #20]
 8000dc8:	6849      	ldr	r1, [r1, #4]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000dca:	b15b      	cbz	r3, 8000de4 <HAL_FDCAN_ConfigFilter+0x40>
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000dcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000dce:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000dd2:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000dd6:	432a      	orrs	r2, r5
      *FilterAddress = FilterElementW1;
 8000dd8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
    return HAL_OK;
 8000ddc:	2000      	movs	r0, #0
      *FilterAddress = FilterElementW2;
 8000dde:	607a      	str	r2, [r7, #4]
}
 8000de0:	bcf0      	pop	{r4, r5, r6, r7}
 8000de2:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000de4:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
 8000de8:	432a      	orrs	r2, r5
      *FilterAddress = FilterElementW1;
 8000dea:	6c00      	ldr	r0, [r0, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000dec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      *FilterAddress = FilterElementW1;
 8000df0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8000df4:	bcf0      	pop	{r4, r5, r6, r7}
    return HAL_OK;
 8000df6:	4618      	mov	r0, r3
}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <HAL_FDCAN_ConfigGlobalFilter>:
{
 8000dfc:	b410      	push	{r4}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000dfe:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8000e02:	2c01      	cmp	r4, #1
 8000e04:	d007      	beq.n	8000e16 <HAL_FDCAN_ConfigGlobalFilter+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e06:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8000e08:	f85d 4b04 	ldr.w	r4, [sp], #4
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000e12:	2001      	movs	r0, #1
}
 8000e14:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000e16:	6804      	ldr	r4, [r0, #0]
 8000e18:	9801      	ldr	r0, [sp, #4]
 8000e1a:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
 8000e1e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000e22:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8000e26:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8000e2a:	f020 023f 	bic.w	r2, r0, #63	; 0x3f
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    return HAL_OK;
 8000e34:	2000      	movs	r0, #0
}
 8000e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000e3c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8000e40:	2a01      	cmp	r2, #1
{
 8000e42:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000e44:	d005      	beq.n	8000e52 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e46:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000e48:	f042 0204 	orr.w	r2, r2, #4
 8000e4c:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
}
 8000e50:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e52:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000e54:	2202      	movs	r2, #2
 8000e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e5a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e5c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8000e64:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e66:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000e6c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d006      	beq.n	8000e82 <HAL_FDCAN_AddMessageToTxFifoQ+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000e74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	4770      	bx	lr
{
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000e86:	6806      	ldr	r6, [r0, #0]
 8000e88:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	d507      	bpl.n	8000ea0 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000e90:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000ea0:	f8d6 40c4 	ldr.w	r4, [r6, #196]	; 0xc4
 8000ea4:	690b      	ldr	r3, [r1, #16]
 8000ea6:	688d      	ldr	r5, [r1, #8]
 8000ea8:	680f      	ldr	r7, [r1, #0]
 8000eaa:	f3c4 4c01 	ubfx	ip, r4, #16, #2
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000eae:	684c      	ldr	r4, [r1, #4]
 8000eb0:	432b      	orrs	r3, r5
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d13b      	bne.n	8000f2e <HAL_FDCAN_AddMessageToTxFifoQ+0xc2>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000eb6:	ea43 4e87 	orr.w	lr, r3, r7, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000eba:	e9d1 7306 	ldrd	r7, r3, [r1, #24]
 8000ebe:	694d      	ldr	r5, [r1, #20]
 8000ec0:	68cc      	ldr	r4, [r1, #12]
 8000ec2:	433b      	orrs	r3, r7
 8000ec4:	432b      	orrs	r3, r5
 8000ec6:	4323      	orrs	r3, r4
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000ec8:	6d45      	ldr	r5, [r0, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000eca:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000ecc:	eb0c 07cc 	add.w	r7, ip, ip, lsl #3
 8000ed0:	00ff      	lsls	r7, r7, #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000ed2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000ed6:	197c      	adds	r4, r7, r5

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8000ed8:	f847 e005 	str.w	lr, [r7, r5]
  TxAddress++;
  *TxAddress = TxElementW2;
 8000edc:	6063      	str	r3, [r4, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8000ede:	89cb      	ldrh	r3, [r1, #14]
 8000ee0:	4f15      	ldr	r7, [pc, #84]	; (8000f38 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8000ee2:	5cfb      	ldrb	r3, [r7, r3]
  TxAddress++;
 8000ee4:	f104 0508 	add.w	r5, r4, #8
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8000ee8:	b1bb      	cbz	r3, 8000f1a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
 8000eea:	2400      	movs	r4, #0
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000eec:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000eee:	f892 e003 	ldrb.w	lr, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8000ef2:	f892 8000 	ldrb.w	r8, [r2]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000ef6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000ef8:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000efc:	f892 e001 	ldrb.w	lr, [r2, #1]
 8000f00:	ea43 0308 	orr.w	r3, r3, r8
 8000f04:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000f08:	f845 3b04 	str.w	r3, [r5], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8000f0c:	89cb      	ldrh	r3, [r1, #14]
 8000f0e:	5cfb      	ldrb	r3, [r7, r3]
 8000f10:	3404      	adds	r4, #4
 8000f12:	429c      	cmp	r4, r3
 8000f14:	f102 0204 	add.w	r2, r2, #4
 8000f18:	d3e8      	bcc.n	8000eec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	fa02 f20c 	lsl.w	r2, r2, ip
    return HAL_OK;
 8000f20:	2300      	movs	r3, #0
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f22:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000f26:	6582      	str	r2, [r0, #88]	; 0x58
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000f2e:	f047 4e80 	orr.w	lr, r7, #1073741824	; 0x40000000
 8000f32:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f36:	e7c0      	b.n	8000eba <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8000f38:	08002fc8 	.word	0x08002fc8

08000f3c <HAL_FDCAN_GetRxMessage>:
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f3e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8000f42:	2c02      	cmp	r4, #2
 8000f44:	d005      	beq.n	8000f52 <HAL_FDCAN_GetRxMessage+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f46:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
}
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f52:	2940      	cmp	r1, #64	; 0x40
 8000f54:	f8d0 e000 	ldr.w	lr, [r0]
 8000f58:	d053      	beq.n	8001002 <HAL_FDCAN_GetRxMessage+0xc6>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000f5a:	f8de 4098 	ldr.w	r4, [lr, #152]	; 0x98
 8000f5e:	0724      	lsls	r4, r4, #28
 8000f60:	d049      	beq.n	8000ff6 <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000f62:	f8de 5098 	ldr.w	r5, [lr, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f66:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000f68:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f6c:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8000f70:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000f74:	6825      	ldr	r5, [r4, #0]
 8000f76:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8000f7a:	6055      	str	r5, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000f7c:	2d00      	cmp	r5, #0
 8000f7e:	d14e      	bne.n	800101e <HAL_FDCAN_GetRxMessage+0xe2>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000f80:	6825      	ldr	r5, [r4, #0]
 8000f82:	f3c5 458a 	ubfx	r5, r5, #18, #11
 8000f86:	6015      	str	r5, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000f88:	6825      	ldr	r5, [r4, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000f8a:	4f27      	ldr	r7, [pc, #156]	; (8001028 <HAL_FDCAN_GetRxMessage+0xec>)
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000f8c:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
 8000f90:	6095      	str	r5, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000f92:	6825      	ldr	r5, [r4, #0]
 8000f94:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000f98:	6115      	str	r5, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000f9a:	88a5      	ldrh	r5, [r4, #4]
 8000f9c:	61d5      	str	r5, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8000f9e:	6865      	ldr	r5, [r4, #4]
 8000fa0:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
 8000fa4:	60d5      	str	r5, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000fa6:	6866      	ldr	r6, [r4, #4]
 8000fa8:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8000fac:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000fae:	6866      	ldr	r6, [r4, #4]
 8000fb0:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8000fb4:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000fb6:	79e6      	ldrb	r6, [r4, #7]
 8000fb8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000fbc:	0c2d      	lsrs	r5, r5, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000fbe:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000fc0:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000fc2:	5d7d      	ldrb	r5, [r7, r5]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000fc4:	0ff6      	lsrs	r6, r6, #31
 8000fc6:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000fc8:	b16d      	cbz	r5, 8000fe6 <HAL_FDCAN_GetRxMessage+0xaa>
 8000fca:	3407      	adds	r4, #7
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	2500      	movs	r5, #0
      pRxData[ByteCounter] = pData[ByteCounter];
 8000fd0:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8000fd4:	f803 6f01 	strb.w	r6, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8000fd8:	89d6      	ldrh	r6, [r2, #14]
 8000fda:	5dbe      	ldrb	r6, [r7, r6]
 8000fdc:	3501      	adds	r5, #1
 8000fde:	42ae      	cmp	r6, r5
 8000fe0:	d8f6      	bhi.n	8000fd0 <HAL_FDCAN_GetRxMessage+0x94>
 8000fe2:	f8d0 e000 	ldr.w	lr, [r0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000fe6:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8000fe8:	bf0c      	ite	eq
 8000fea:	f8ce c094 	streq.w	ip, [lr, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8000fee:	f8ce c09c 	strne.w	ip, [lr, #156]	; 0x9c
    return HAL_OK;
 8000ff2:	2000      	movs	r0, #0
}
 8000ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000ff6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
}
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001002:	f8de 4090 	ldr.w	r4, [lr, #144]	; 0x90
 8001006:	0725      	lsls	r5, r4, #28
 8001008:	d0f5      	beq.n	8000ff6 <HAL_FDCAN_GetRxMessage+0xba>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800100a:	f8de 5090 	ldr.w	r5, [lr, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800100e:	6c84      	ldr	r4, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001010:	f3c5 2c01 	ubfx	ip, r5, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001014:	eb0c 05cc 	add.w	r5, ip, ip, lsl #3
 8001018:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800101c:	e7aa      	b.n	8000f74 <HAL_FDCAN_GetRxMessage+0x38>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800101e:	6825      	ldr	r5, [r4, #0]
 8001020:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8001024:	e7af      	b.n	8000f86 <HAL_FDCAN_GetRxMessage+0x4a>
 8001026:	bf00      	nop
 8001028:	08002fc8 	.word	0x08002fc8

0800102c <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800102c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001030:	3b01      	subs	r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d905      	bls.n	8001042 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001036:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001042:	6803      	ldr	r3, [r0, #0]
{
 8001044:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001046:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 800104a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800104c:	d02f      	beq.n	80010ae <HAL_FDCAN_ActivateNotification+0x82>
 800104e:	07c4      	lsls	r4, r0, #31
 8001050:	d42d      	bmi.n	80010ae <HAL_FDCAN_ActivateNotification+0x82>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001052:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001054:	f044 0401 	orr.w	r4, r4, #1
 8001058:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800105a:	b10d      	cbz	r5, 8001060 <HAL_FDCAN_ActivateNotification+0x34>
 800105c:	07c5      	lsls	r5, r0, #31
 800105e:	d40e      	bmi.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 8001060:	f011 0f38 	tst.w	r1, #56	; 0x38
 8001064:	d001      	beq.n	800106a <HAL_FDCAN_ActivateNotification+0x3e>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001066:	0784      	lsls	r4, r0, #30
 8001068:	d409      	bmi.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 800106a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800106e:	d001      	beq.n	8001074 <HAL_FDCAN_ActivateNotification+0x48>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001070:	0745      	lsls	r5, r0, #29
 8001072:	d404      	bmi.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 8001074:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8001078:	d039      	beq.n	80010ee <HAL_FDCAN_ActivateNotification+0xc2>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800107a:	0704      	lsls	r4, r0, #28
 800107c:	d537      	bpl.n	80010ee <HAL_FDCAN_ActivateNotification+0xc2>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800107e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001080:	f040 0002 	orr.w	r0, r0, #2
 8001084:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001086:	060c      	lsls	r4, r1, #24
 8001088:	d504      	bpl.n	8001094 <HAL_FDCAN_ActivateNotification+0x68>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800108a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800108e:	4310      	orrs	r0, r2
 8001090:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001094:	05c8      	lsls	r0, r1, #23
 8001096:	d504      	bpl.n	80010a2 <HAL_FDCAN_ActivateNotification+0x76>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001098:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800109c:	4302      	orrs	r2, r0
 800109e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80010a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010a4:	4311      	orrs	r1, r2
    return HAL_OK;
 80010a6:	2000      	movs	r0, #0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80010a8:	6559      	str	r1, [r3, #84]	; 0x54
}
 80010aa:	bc30      	pop	{r4, r5}
 80010ac:	4770      	bx	lr
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80010ae:	f011 0f38 	tst.w	r1, #56	; 0x38
 80010b2:	d001      	beq.n	80010b8 <HAL_FDCAN_ActivateNotification+0x8c>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80010b4:	0784      	lsls	r4, r0, #30
 80010b6:	d5cc      	bpl.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
 80010b8:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80010bc:	d114      	bne.n	80010e8 <HAL_FDCAN_ActivateNotification+0xbc>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80010be:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80010c2:	d001      	beq.n	80010c8 <HAL_FDCAN_ActivateNotification+0x9c>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80010c4:	0704      	lsls	r4, r0, #28
 80010c6:	d5c4      	bpl.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
 80010c8:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80010cc:	d001      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xa6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010ce:	06c4      	lsls	r4, r0, #27
 80010d0:	d5bf      	bpl.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
 80010d2:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80010d6:	d001      	beq.n	80010dc <HAL_FDCAN_ActivateNotification+0xb0>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010d8:	0684      	lsls	r4, r0, #26
 80010da:	d5ba      	bpl.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
 80010dc:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80010e0:	d0bb      	beq.n	800105a <HAL_FDCAN_ActivateNotification+0x2e>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80010e2:	0644      	lsls	r4, r0, #25
 80010e4:	d4b9      	bmi.n	800105a <HAL_FDCAN_ActivateNotification+0x2e>
 80010e6:	e7b4      	b.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80010e8:	0744      	lsls	r4, r0, #29
 80010ea:	d5b2      	bpl.n	8001052 <HAL_FDCAN_ActivateNotification+0x26>
 80010ec:	e7e7      	b.n	80010be <HAL_FDCAN_ActivateNotification+0x92>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80010ee:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80010f2:	d001      	beq.n	80010f8 <HAL_FDCAN_ActivateNotification+0xcc>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80010f4:	06c5      	lsls	r5, r0, #27
 80010f6:	d4c2      	bmi.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 80010f8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80010fc:	d001      	beq.n	8001102 <HAL_FDCAN_ActivateNotification+0xd6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80010fe:	0684      	lsls	r4, r0, #26
 8001100:	d4bd      	bmi.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 8001102:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8001106:	d0be      	beq.n	8001086 <HAL_FDCAN_ActivateNotification+0x5a>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001108:	0645      	lsls	r5, r0, #25
 800110a:	d5bc      	bpl.n	8001086 <HAL_FDCAN_ActivateNotification+0x5a>
 800110c:	e7b7      	b.n	800107e <HAL_FDCAN_ActivateNotification+0x52>
 800110e:	bf00      	nop

08001110 <HAL_FDCAN_TxEventFifoCallback>:
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <HAL_FDCAN_RxFifo1Callback>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <HAL_FDCAN_TxFifoEmptyCallback>:
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <HAL_FDCAN_TxBufferCompleteCallback>:
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <HAL_FDCAN_TxBufferAbortCallback>:
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <HAL_FDCAN_TimestampWraparoundCallback>:
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <HAL_FDCAN_TimeoutOccurredCallback>:
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <HAL_FDCAN_HighPriorityMessageCallback>:
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <HAL_FDCAN_ErrorCallback>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <HAL_FDCAN_ErrorStatusCallback>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <HAL_FDCAN_IRQHandler>:
{
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800113c:	6803      	ldr	r3, [r0, #0]
 800113e:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001142:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001146:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800114a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800114c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800114e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001150:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8001152:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001156:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001158:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 800115c:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 800115e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001162:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8001166:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 800116a:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800116c:	0652      	lsls	r2, r2, #25
{
 800116e:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001170:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001174:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001178:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800117c:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001180:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001184:	d503      	bpl.n	800118e <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001188:	0651      	lsls	r1, r2, #25
 800118a:	f100 8087 	bmi.w	800129c <HAL_FDCAN_IRQHandler+0x164>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800118e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001190:	05d2      	lsls	r2, r2, #23
 8001192:	d503      	bpl.n	800119c <HAL_FDCAN_IRQHandler+0x64>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001196:	05d0      	lsls	r0, r2, #23
 8001198:	f100 8086 	bmi.w	80012a8 <HAL_FDCAN_IRQHandler+0x170>
  if (TxEventFifoITs != 0U)
 800119c:	f1b9 0f00 	cmp.w	r9, #0
 80011a0:	d14d      	bne.n	800123e <HAL_FDCAN_IRQHandler+0x106>
  if (RxFifo0ITs != 0U)
 80011a2:	f1b8 0f00 	cmp.w	r8, #0
 80011a6:	d13a      	bne.n	800121e <HAL_FDCAN_IRQHandler+0xe6>
  if (RxFifo1ITs != 0U)
 80011a8:	2f00      	cmp	r7, #0
 80011aa:	d141      	bne.n	8001230 <HAL_FDCAN_IRQHandler+0xf8>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80011ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ae:	0591      	lsls	r1, r2, #22
 80011b0:	d502      	bpl.n	80011b8 <HAL_FDCAN_IRQHandler+0x80>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80011b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011b4:	0592      	lsls	r2, r2, #22
 80011b6:	d455      	bmi.n	8001264 <HAL_FDCAN_IRQHandler+0x12c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80011b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ba:	0617      	lsls	r7, r2, #24
 80011bc:	d502      	bpl.n	80011c4 <HAL_FDCAN_IRQHandler+0x8c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80011be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011c0:	0610      	lsls	r0, r2, #24
 80011c2:	d457      	bmi.n	8001274 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80011c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c6:	0491      	lsls	r1, r2, #18
 80011c8:	d502      	bpl.n	80011d0 <HAL_FDCAN_IRQHandler+0x98>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80011ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011cc:	0492      	lsls	r2, r2, #18
 80011ce:	d45d      	bmi.n	800128c <HAL_FDCAN_IRQHandler+0x154>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80011d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d2:	0417      	lsls	r7, r2, #16
 80011d4:	d502      	bpl.n	80011dc <HAL_FDCAN_IRQHandler+0xa4>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80011d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011d8:	0410      	lsls	r0, r2, #16
 80011da:	d43b      	bmi.n	8001254 <HAL_FDCAN_IRQHandler+0x11c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80011dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011de:	0451      	lsls	r1, r2, #17
 80011e0:	d509      	bpl.n	80011f6 <HAL_FDCAN_IRQHandler+0xbe>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80011e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011e4:	0452      	lsls	r2, r2, #17
 80011e6:	d506      	bpl.n	80011f6 <HAL_FDCAN_IRQHandler+0xbe>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80011e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ec:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80011ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011f4:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80011f6:	b966      	cbnz	r6, 8001212 <HAL_FDCAN_IRQHandler+0xda>
  if (Errors != 0U)
 80011f8:	b125      	cbz	r5, 8001204 <HAL_FDCAN_IRQHandler+0xcc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80011fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001200:	431d      	orrs	r5, r3
 8001202:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001204:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001206:	b113      	cbz	r3, 800120e <HAL_FDCAN_IRQHandler+0xd6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff ff91 	bl	8001130 <HAL_FDCAN_ErrorCallback>
}
 800120e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001212:	651e      	str	r6, [r3, #80]	; 0x50
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001214:	4631      	mov	r1, r6
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff ff8c 	bl	8001134 <HAL_FDCAN_ErrorStatusCallback>
 800121c:	e7ec      	b.n	80011f8 <HAL_FDCAN_IRQHandler+0xc0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800121e:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001222:	4641      	mov	r1, r8
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff fab5 	bl	8000794 <HAL_FDCAN_RxFifo0Callback>
 800122a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 800122c:	2f00      	cmp	r7, #0
 800122e:	d0bd      	beq.n	80011ac <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001230:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001232:	4639      	mov	r1, r7
 8001234:	4620      	mov	r0, r4
 8001236:	f7ff ff6d 	bl	8001114 <HAL_FDCAN_RxFifo1Callback>
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	e7b6      	b.n	80011ac <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800123e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001242:	4649      	mov	r1, r9
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff ff63 	bl	8001110 <HAL_FDCAN_TxEventFifoCallback>
 800124a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 800124c:	f1b8 0f00 	cmp.w	r8, #0
 8001250:	d0aa      	beq.n	80011a8 <HAL_FDCAN_IRQHandler+0x70>
 8001252:	e7e4      	b.n	800121e <HAL_FDCAN_IRQHandler+0xe6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001258:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff ff64 	bl	8001128 <HAL_FDCAN_TimeoutOccurredCallback>
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	e7bb      	b.n	80011dc <HAL_FDCAN_IRQHandler+0xa4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ff54 	bl	8001118 <HAL_FDCAN_TxFifoEmptyCallback>
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	e7a1      	b.n	80011b8 <HAL_FDCAN_IRQHandler+0x80>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001274:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001278:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800127c:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800127e:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff ff4a 	bl	800111c <HAL_FDCAN_TxBufferCompleteCallback>
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	e79b      	b.n	80011c4 <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800128c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001290:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff ff46 	bl	8001124 <HAL_FDCAN_TimestampWraparoundCallback>
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	e799      	b.n	80011d0 <HAL_FDCAN_IRQHandler+0x98>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80012a0:	f7ff ff44 	bl	800112c <HAL_FDCAN_HighPriorityMessageCallback>
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	e772      	b.n	800118e <HAL_FDCAN_IRQHandler+0x56>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80012a8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80012ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80012b4:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80012b6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff ff31 	bl	8001120 <HAL_FDCAN_TxBufferAbortCallback>
 80012be:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80012c0:	f1b9 0f00 	cmp.w	r9, #0
 80012c4:	f43f af6d 	beq.w	80011a2 <HAL_FDCAN_IRQHandler+0x6a>
 80012c8:	e7b9      	b.n	800123e <HAL_FDCAN_IRQHandler+0x106>
 80012ca:	bf00      	nop

080012cc <HAL_FDCAN_GetState>:
  return hfdcan->State;
 80012cc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012d8:	f8d1 e000 	ldr.w	lr, [r1]
{
 80012dc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012de:	f1be 0f00 	cmp.w	lr, #0
 80012e2:	f000 8081 	beq.w	80013e8 <HAL_GPIO_Init+0x114>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012e6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001488 <HAL_GPIO_Init+0x1b4>
 80012ea:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 80012ec:	2600      	movs	r6, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012ee:	2301      	movs	r3, #1
 80012f0:	fa03 f206 	lsl.w	r2, r3, r6
    if (iocurrent != 0x00u)
 80012f4:	ea12 070e 	ands.w	r7, r2, lr
 80012f8:	d072      	beq.n	80013e0 <HAL_GPIO_Init+0x10c>
 80012fa:	e9d8 1401 	ldrd	r1, r4, [r8, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fe:	f021 0b10 	bic.w	fp, r1, #16
 8001302:	fa06 fc03 	lsl.w	ip, r6, r3
 8001306:	f10b 35ff 	add.w	r5, fp, #4294967295
 800130a:	2303      	movs	r3, #3
 800130c:	fa03 fa0c 	lsl.w	sl, r3, ip
 8001310:	2d01      	cmp	r5, #1
 8001312:	ea6f 0a0a 	mvn.w	sl, sl
 8001316:	fa04 f40c 	lsl.w	r4, r4, ip
 800131a:	d968      	bls.n	80013ee <HAL_GPIO_Init+0x11a>
      temp = GPIOx->PUPDR;
 800131c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131e:	ea0a 0303 	and.w	r3, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001322:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8001324:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8001326:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001328:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800132c:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	fa03 f30c 	lsl.w	r3, r3, ip
 8001334:	ea43 030a 	orr.w	r3, r3, sl
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001338:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 800133a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133c:	d550      	bpl.n	80013e0 <HAL_GPIO_Init+0x10c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x19c>)
 8001340:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6613      	str	r3, [r2, #96]	; 0x60
 8001348:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800134a:	f026 0403 	bic.w	r4, r6, #3
 800134e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800135a:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800135c:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800136a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800136e:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001372:	d013      	beq.n	800139c <HAL_GPIO_Init+0xc8>
 8001374:	4d3f      	ldr	r5, [pc, #252]	; (8001474 <HAL_GPIO_Init+0x1a0>)
 8001376:	42a8      	cmp	r0, r5
 8001378:	d06b      	beq.n	8001452 <HAL_GPIO_Init+0x17e>
 800137a:	4d3f      	ldr	r5, [pc, #252]	; (8001478 <HAL_GPIO_Init+0x1a4>)
 800137c:	42a8      	cmp	r0, r5
 800137e:	d063      	beq.n	8001448 <HAL_GPIO_Init+0x174>
 8001380:	4d3e      	ldr	r5, [pc, #248]	; (800147c <HAL_GPIO_Init+0x1a8>)
 8001382:	42a8      	cmp	r0, r5
 8001384:	d06a      	beq.n	800145c <HAL_GPIO_Init+0x188>
 8001386:	4d3e      	ldr	r5, [pc, #248]	; (8001480 <HAL_GPIO_Init+0x1ac>)
 8001388:	42a8      	cmp	r0, r5
 800138a:	d06c      	beq.n	8001466 <HAL_GPIO_Init+0x192>
 800138c:	4d3d      	ldr	r5, [pc, #244]	; (8001484 <HAL_GPIO_Init+0x1b0>)
 800138e:	42a8      	cmp	r0, r5
 8001390:	bf0c      	ite	eq
 8001392:	2505      	moveq	r5, #5
 8001394:	2506      	movne	r5, #6
 8001396:	fa05 f303 	lsl.w	r3, r5, r3
 800139a:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR1;
 800139e:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
 80013a2:	43fa      	mvns	r2, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a4:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 80013a6:	bf54      	ite	pl
 80013a8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80013aa:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 80013ac:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR1;
 80013b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 80013b6:	bf54      	ite	pl
 80013b8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80013ba:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 80013bc:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80013c6:	bf54      	ite	pl
 80013c8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80013ca:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 80013cc:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR1;
 80013d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 80013d6:	bf54      	ite	pl
 80013d8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80013da:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 80013dc:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 80013e0:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013e2:	fa3e f306 	lsrs.w	r3, lr, r6
 80013e6:	d182      	bne.n	80012ee <HAL_GPIO_Init+0x1a>
  }
}
 80013e8:	b003      	add	sp, #12
 80013ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80013ee:	6883      	ldr	r3, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013f4:	ea03 030a 	and.w	r3, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f8:	fa05 f50c 	lsl.w	r5, r5, ip
 80013fc:	431d      	orrs	r5, r3
        GPIOx->OSPEEDR = temp;
 80013fe:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001400:	6843      	ldr	r3, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001402:	f3c1 1500 	ubfx	r5, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	ea23 0302 	bic.w	r3, r3, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800140a:	462a      	mov	r2, r5
 800140c:	40b2      	lsls	r2, r6
 800140e:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 8001410:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001412:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	ea03 030a 	and.w	r3, r3, sl
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001418:	431c      	orrs	r4, r3
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141a:	f1bb 0f02 	cmp.w	fp, #2
      GPIOx->PUPDR = temp;
 800141e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001420:	d181      	bne.n	8001326 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 8001422:	08f4      	lsrs	r4, r6, #3
 8001424:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001428:	f006 0307 	and.w	r3, r6, #7
        temp = GPIOx->AFR[position >> 3U];
 800142c:	6a25      	ldr	r5, [r4, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800142e:	f8d8 2010 	ldr.w	r2, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	f04f 0b0f 	mov.w	fp, #15
 8001438:	fa0b fb03 	lsl.w	fp, fp, r3
 800143c:	ea25 050b 	bic.w	r5, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001440:	409a      	lsls	r2, r3
 8001442:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 8001444:	6222      	str	r2, [r4, #32]
 8001446:	e76e      	b.n	8001326 <HAL_GPIO_Init+0x52>
 8001448:	2502      	movs	r5, #2
 800144a:	fa05 f303 	lsl.w	r3, r5, r3
 800144e:	431a      	orrs	r2, r3
 8001450:	e7a4      	b.n	800139c <HAL_GPIO_Init+0xc8>
 8001452:	2501      	movs	r5, #1
 8001454:	fa05 f303 	lsl.w	r3, r5, r3
 8001458:	431a      	orrs	r2, r3
 800145a:	e79f      	b.n	800139c <HAL_GPIO_Init+0xc8>
 800145c:	2503      	movs	r5, #3
 800145e:	fa05 f303 	lsl.w	r3, r5, r3
 8001462:	431a      	orrs	r2, r3
 8001464:	e79a      	b.n	800139c <HAL_GPIO_Init+0xc8>
 8001466:	2504      	movs	r5, #4
 8001468:	fa05 f303 	lsl.w	r3, r5, r3
 800146c:	431a      	orrs	r2, r3
 800146e:	e795      	b.n	800139c <HAL_GPIO_Init+0xc8>
 8001470:	40021000 	.word	0x40021000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48001000 	.word	0x48001000
 8001484:	48001400 	.word	0x48001400
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	b90a      	cbnz	r2, 8001492 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001490:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	6181      	str	r1, [r0, #24]
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001498:	6943      	ldr	r3, [r0, #20]
 800149a:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149c:	bf14      	ite	ne
 800149e:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a0:	6181      	streq	r1, [r0, #24]
  }
}
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80014aa:	6951      	ldr	r1, [r2, #20]
 80014ac:	4201      	tst	r1, r0
 80014ae:	d100      	bne.n	80014b2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80014b0:	4770      	bx	lr
{
 80014b2:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b6:	f7ff fff5 	bl	80014a4 <HAL_GPIO_EXTI_Callback>
}
 80014ba:	bd08      	pop	{r3, pc}
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c0:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80014c2:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c4:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014c6:	b968      	cbnz	r0, 80014e4 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d0:	d014      	beq.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80014d6:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80014e2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80014e8:	d02f      	beq.n	800154a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
}
 80014f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014fa:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014fc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001504:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001508:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001512:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001516:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001518:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800151c:	2332      	movs	r3, #50	; 0x32
 800151e:	fb03 f304 	mul.w	r3, r3, r4
 8001522:	fba0 0303 	umull	r0, r3, r0, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001528:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152e:	d506      	bpl.n	800153e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8001530:	e000      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x74>
 8001532:	b123      	cbz	r3, 800153e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8001534:	6951      	ldr	r1, [r2, #20]
 8001536:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8001538:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153c:	d4f9      	bmi.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	055c      	lsls	r4, r3, #21
 8001544:	d5d6      	bpl.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
 8001548:	e7d5      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d009      	beq.n	8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001554:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8001558:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8001560:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001562:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001566:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001570:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001574:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800157e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001582:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001584:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001586:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001588:	2332      	movs	r3, #50	; 0x32
 800158a:	fb03 f304 	mul.w	r3, r3, r4
 800158e:	fba0 0303 	umull	r0, r3, r0, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001596:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159a:	d5d0      	bpl.n	800153e <HAL_PWREx_ControlVoltageScaling+0x7e>
 800159c:	e001      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0cd      	beq.n	800153e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80015a2:	6951      	ldr	r1, [r2, #20]
 80015a4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80015a6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015aa:	d5c8      	bpl.n	800153e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80015ac:	e7f7      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0xde>
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 816c 	beq.w	800189a <HAL_RCC_OscConfig+0x2de>
{
 80015c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	07d9      	lsls	r1, r3, #31
{
 80015ca:	b082      	sub	sp, #8
 80015cc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	d52d      	bpl.n	800162c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d0:	49b7      	ldr	r1, [pc, #732]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 80015d2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015da:	2a0c      	cmp	r2, #12
 80015dc:	f000 80f5 	beq.w	80017ca <HAL_RCC_OscConfig+0x20e>
 80015e0:	2a08      	cmp	r2, #8
 80015e2:	f000 80f7 	beq.w	80017d4 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	f000 812e 	beq.w	800184c <HAL_RCC_OscConfig+0x290>
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	f000 81e0 	beq.w	80019b8 <HAL_RCC_OscConfig+0x3fc>
 80015f8:	4dad      	ldr	r5, [pc, #692]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 80015fa:	682a      	ldr	r2, [r5, #0]
 80015fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001600:	602a      	str	r2, [r5, #0]
 8001602:	682a      	ldr	r2, [r5, #0]
 8001604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001608:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8123 	bne.w	8001856 <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff f9fa 	bl	8000a08 <HAL_GetTick>
 8001614:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e005      	b.n	8001624 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff f9f6 	bl	8000a08 <HAL_GetTick>
 800161c:	1b80      	subs	r0, r0, r6
 800161e:	2864      	cmp	r0, #100	; 0x64
 8001620:	f200 8137 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	039f      	lsls	r7, r3, #14
 8001628:	d4f6      	bmi.n	8001618 <HAL_RCC_OscConfig+0x5c>
 800162a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162c:	079e      	lsls	r6, r3, #30
 800162e:	f100 80a5 	bmi.w	800177c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001632:	071a      	lsls	r2, r3, #28
 8001634:	d519      	bpl.n	800166a <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001638:	4d9d      	ldr	r5, [pc, #628]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80d7 	beq.w	80017ee <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 8001640:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff f9dc 	bl	8000a08 <HAL_GetTick>
 8001650:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001652:	e005      	b.n	8001660 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f9d8 	bl	8000a08 <HAL_GetTick>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	2802      	cmp	r0, #2
 800165c:	f200 8119 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001660:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001664:	079f      	lsls	r7, r3, #30
 8001666:	d5f5      	bpl.n	8001654 <HAL_RCC_OscConfig+0x98>
 8001668:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	0759      	lsls	r1, r3, #29
 800166c:	d53f      	bpl.n	80016ee <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800166e:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 8001670:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001672:	00d2      	lsls	r2, r2, #3
 8001674:	f100 812b 	bmi.w	80018ce <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800167e:	659a      	str	r2, [r3, #88]	; 0x58
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800168a:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4d89      	ldr	r5, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800168e:	682a      	ldr	r2, [r5, #0]
 8001690:	05d7      	lsls	r7, r2, #23
 8001692:	f140 80ee 	bpl.w	8001872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	68a3      	ldr	r3, [r4, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f000 811a 	beq.w	80018d2 <HAL_RCC_OscConfig+0x316>
 800169e:	2b05      	cmp	r3, #5
 80016a0:	f000 81cb 	beq.w	8001a3a <HAL_RCC_OscConfig+0x47e>
 80016a4:	4d82      	ldr	r5, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 80016a6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80016b2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 810e 	bne.w	80018e0 <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff f9a0 	bl	8000a08 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016cc:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	e006      	b.n	80016de <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f99a 	bl	8000a08 <HAL_GetTick>
 80016d4:	eba0 0008 	sub.w	r0, r0, r8
 80016d8:	42b8      	cmp	r0, r7
 80016da:	f200 80da 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016de:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80016e2:	079a      	lsls	r2, r3, #30
 80016e4:	d4f4      	bmi.n	80016d0 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e6:	2e00      	cmp	r6, #0
 80016e8:	f040 8123 	bne.w	8001932 <HAL_RCC_OscConfig+0x376>
 80016ec:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ee:	069b      	lsls	r3, r3, #26
 80016f0:	d518      	bpl.n	8001724 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f2:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f4:	4d6e      	ldr	r5, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8107 	beq.w	800190a <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 80016fc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff f97e 	bl	8000a08 <HAL_GetTick>
 800170c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800170e:	e005      	b.n	800171c <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001710:	f7ff f97a 	bl	8000a08 <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	2802      	cmp	r0, #2
 8001718:	f200 80bb 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001720:	079f      	lsls	r7, r3, #30
 8001722:	d5f5      	bpl.n	8001710 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001724:	69e0      	ldr	r0, [r4, #28]
 8001726:	b328      	cbz	r0, 8001774 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001728:	4d61      	ldr	r5, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 800172a:	68aa      	ldr	r2, [r5, #8]
 800172c:	f002 020c 	and.w	r2, r2, #12
 8001730:	2a0c      	cmp	r2, #12
 8001732:	f000 814e 	beq.w	80019d2 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001738:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800173a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800173e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001740:	f000 80fd 	beq.w	800193e <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001744:	68ea      	ldr	r2, [r5, #12]
 8001746:	f022 0203 	bic.w	r2, r2, #3
 800174a:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800174c:	68ea      	ldr	r2, [r5, #12]
 800174e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8001752:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001756:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff f956 	bl	8000a08 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800175e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	e005      	b.n	800176e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff f951 	bl	8000a08 <HAL_GetTick>
 8001766:	1b40      	subs	r0, r0, r5
 8001768:	2802      	cmp	r0, #2
 800176a:	f200 8092 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	d4f6      	bmi.n	8001762 <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 8001774:	2000      	movs	r0, #0
}
 8001776:	b002      	add	sp, #8
 8001778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177c:	4a4c      	ldr	r2, [pc, #304]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 800177e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001780:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001782:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d045      	beq.n	8001816 <HAL_RCC_OscConfig+0x25a>
 800178a:	2b04      	cmp	r3, #4
 800178c:	d047      	beq.n	800181e <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8001790:	4d47      	ldr	r5, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8083 	beq.w	800189e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017a0:	f7ff f932 	bl	8000a08 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a6:	e004      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff f92e 	bl	8000a08 <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	2802      	cmp	r0, #2
 80017b0:	d86f      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	0558      	lsls	r0, r3, #21
 80017b6:	d5f7      	bpl.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	686b      	ldr	r3, [r5, #4]
 80017ba:	6922      	ldr	r2, [r4, #16]
 80017bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80017c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017c4:	606b      	str	r3, [r5, #4]
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	e733      	b.n	8001632 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ca:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ce:	2903      	cmp	r1, #3
 80017d0:	f47f af09 	bne.w	80015e6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	0392      	lsls	r2, r2, #14
 80017da:	f57f af27 	bpl.w	800162c <HAL_RCC_OscConfig+0x70>
 80017de:	6862      	ldr	r2, [r4, #4]
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	f47f af23 	bne.w	800162c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
}
 80017e8:	b002      	add	sp, #8
 80017ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80017ee:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017fa:	f7ff f905 	bl	8000a08 <HAL_GetTick>
 80017fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	e004      	b.n	800180c <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff f901 	bl	8000a08 <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	2802      	cmp	r0, #2
 800180a:	d842      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001810:	0798      	lsls	r0, r3, #30
 8001812:	d4f6      	bmi.n	8001802 <HAL_RCC_OscConfig+0x246>
 8001814:	e728      	b.n	8001668 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001816:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800181a:	2a02      	cmp	r2, #2
 800181c:	d1b7      	bne.n	800178e <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	055d      	lsls	r5, r3, #21
 8001824:	d502      	bpl.n	800182c <HAL_RCC_OscConfig+0x270>
 8001826:	68e3      	ldr	r3, [r4, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0dc      	beq.n	80017e6 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 800182e:	6920      	ldr	r0, [r4, #16]
 8001830:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001838:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800183c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800183e:	6808      	ldr	r0, [r1, #0]
 8001840:	f7ff f89c 	bl	800097c <HAL_InitTick>
 8001844:	2800      	cmp	r0, #0
 8001846:	d1ce      	bne.n	80017e6 <HAL_RCC_OscConfig+0x22a>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	e6f2      	b.n	8001632 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001856:	f7ff f8d7 	bl	8000a08 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4d15      	ldr	r5, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 800185c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	e004      	b.n	800186a <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f8d2 	bl	8000a08 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2864      	cmp	r0, #100	; 0x64
 8001868:	d813      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	039b      	lsls	r3, r3, #14
 800186e:	d5f7      	bpl.n	8001860 <HAL_RCC_OscConfig+0x2a4>
 8001870:	e6db      	b.n	800162a <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001872:	682a      	ldr	r2, [r5, #0]
 8001874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001878:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800187a:	f7ff f8c5 	bl	8000a08 <HAL_GetTick>
 800187e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	05d8      	lsls	r0, r3, #23
 8001884:	f53f af07 	bmi.w	8001696 <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7ff f8be 	bl	8000a08 <HAL_GetTick>
 800188c:	1bc0      	subs	r0, r0, r7
 800188e:	2802      	cmp	r0, #2
 8001890:	d9f6      	bls.n	8001880 <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 8001892:	2003      	movs	r0, #3
}
 8001894:	b002      	add	sp, #8
 8001896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
}
 800189c:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 800189e:	682b      	ldr	r3, [r5, #0]
 80018a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8af 	bl	8000a08 <HAL_GetTick>
 80018aa:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x30a>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff f8a4 	bl	8000a08 <HAL_GetTick>
 80018c0:	1b80      	subs	r0, r0, r6
 80018c2:	2802      	cmp	r0, #2
 80018c4:	d8e5      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	0559      	lsls	r1, r3, #21
 80018ca:	d4f7      	bmi.n	80018bc <HAL_RCC_OscConfig+0x300>
 80018cc:	e7bc      	b.n	8001848 <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2600      	movs	r6, #0
 80018d0:	e6dc      	b.n	800168c <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x49c>)
 80018d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80018e0:	f7ff f892 	bl	8000a08 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e4:	4d5c      	ldr	r5, [pc, #368]	; (8001a58 <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 80018e6:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ec:	e005      	b.n	80018fa <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff f88b 	bl	8000a08 <HAL_GetTick>
 80018f2:	eba0 0008 	sub.w	r0, r0, r8
 80018f6:	42b8      	cmp	r0, r7
 80018f8:	d8cb      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80018fe:	0799      	lsls	r1, r3, #30
 8001900:	d5f5      	bpl.n	80018ee <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 8001902:	2e00      	cmp	r6, #0
 8001904:	f43f aef2 	beq.w	80016ec <HAL_RCC_OscConfig+0x130>
 8001908:	e013      	b.n	8001932 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 800190a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001916:	f7ff f877 	bl	8000a08 <HAL_GetTick>
 800191a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800191c:	e004      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191e:	f7ff f873 	bl	8000a08 <HAL_GetTick>
 8001922:	1b80      	subs	r0, r0, r6
 8001924:	2802      	cmp	r0, #2
 8001926:	d8b4      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001928:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800192c:	0798      	lsls	r0, r3, #30
 800192e:	d4f6      	bmi.n	800191e <HAL_RCC_OscConfig+0x362>
 8001930:	e6f8      	b.n	8001724 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x49c>)
 8001934:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	e6d6      	b.n	80016ec <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 800193e:	f7ff f863 	bl	8000a08 <HAL_GetTick>
 8001942:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	e004      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f85f 	bl	8000a08 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2802      	cmp	r0, #2
 800194e:	d8a0      	bhi.n	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	0199      	lsls	r1, r3, #6
 8001954:	d4f7      	bmi.n	8001946 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001956:	68e9      	ldr	r1, [r5, #12]
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_RCC_OscConfig+0x4a0>)
 800195a:	6a22      	ldr	r2, [r4, #32]
 800195c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800195e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001960:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001962:	400b      	ands	r3, r1
 8001964:	4313      	orrs	r3, r2
 8001966:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800196a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800196e:	3801      	subs	r0, #1
 8001970:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8001974:	0849      	lsrs	r1, r1, #1
 8001976:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800197a:	3901      	subs	r1, #1
 800197c:	0852      	lsrs	r2, r2, #1
 800197e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001982:	3a01      	subs	r2, #1
 8001984:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001988:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800198a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198c:	4c32      	ldr	r4, [pc, #200]	; (8001a58 <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001992:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001994:	68eb      	ldr	r3, [r5, #12]
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800199c:	f7ff f834 	bl	8000a08 <HAL_GetTick>
 80019a0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f830 	bl	8000a08 <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	2802      	cmp	r0, #2
 80019ac:	f63f af71 	bhi.w	8001892 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	019a      	lsls	r2, r3, #6
 80019b4:	d5f6      	bpl.n	80019a4 <HAL_RCC_OscConfig+0x3e8>
 80019b6:	e6dd      	b.n	8001774 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019bc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e741      	b.n	8001856 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d2:	2801      	cmp	r0, #1
 80019d4:	f43f af08 	beq.w	80017e8 <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 80019d8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	6a22      	ldr	r2, [r4, #32]
 80019dc:	f003 0103 	and.w	r1, r3, #3
 80019e0:	4291      	cmp	r1, r2
 80019e2:	f47f af00 	bne.w	80017e6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ec:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80019f2:	f47f aef8 	bne.w	80017e6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80019f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001a00:	f47f aef1 	bne.w	80017e6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001a0e:	f47f aeea 	bne.w	80017e6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a14:	0852      	lsrs	r2, r2, #1
 8001a16:	3a01      	subs	r2, #1
 8001a18:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a1c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001a20:	f47f aee1 	bne.w	80017e6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a24:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001a32:	bf14      	ite	ne
 8001a34:	2001      	movne	r0, #1
 8001a36:	2000      	moveq	r0, #0
 8001a38:	e6d6      	b.n	80017e8 <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCC_OscConfig+0x49c>)
 8001a3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a40:	f042 0204 	orr.w	r2, r2, #4
 8001a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a54:	e744      	b.n	80018e0 <HAL_RCC_OscConfig+0x324>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	019f800c 	.word	0x019f800c

08001a60 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f000 8105 	beq.w	8001c70 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a66:	4aad      	ldr	r2, [pc, #692]	; (8001d1c <HAL_RCC_ClockConfig+0x2bc>)
{
 8001a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	428b      	cmp	r3, r1
 8001a74:	d20c      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	f023 030f 	bic.w	r3, r3, #15
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	428b      	cmp	r3, r1
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 8001a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	07df      	lsls	r7, r3, #31
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	f140 8088 	bpl.w	8001bac <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9c:	6842      	ldr	r2, [r0, #4]
 8001a9e:	2a03      	cmp	r2, #3
 8001aa0:	f000 80ad 	beq.w	8001bfe <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa4:	4b9e      	ldr	r3, [pc, #632]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa8:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	f000 80ff 	beq.w	8001cac <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aae:	055b      	lsls	r3, r3, #21
 8001ab0:	d5eb      	bpl.n	8001a8a <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ab2:	4b9b      	ldr	r3, [pc, #620]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	f001 010c 	and.w	r1, r1, #12
 8001aba:	2904      	cmp	r1, #4
 8001abc:	d00a      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	f001 010c 	and.w	r1, r1, #12
 8001ac4:	2908      	cmp	r1, #8
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ac8:	6899      	ldr	r1, [r3, #8]
 8001aca:	f001 010c 	and.w	r1, r1, #12
 8001ace:	290c      	cmp	r1, #12
 8001ad0:	f000 80fb 	beq.w	8001cca <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ad4:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad8:	4e91      	ldr	r6, [pc, #580]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001ada:	68b3      	ldr	r3, [r6, #8]
 8001adc:	f023 0303 	bic.w	r3, r3, #3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8001ae4:	f7fe ff90 	bl	8000a08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001aec:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e005      	b.n	8001afc <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7fe ff8a 	bl	8000a08 <HAL_GetTick>
 8001af4:	eba0 0009 	sub.w	r0, r0, r9
 8001af8:	42b8      	cmp	r0, r7
 8001afa:	d874      	bhi.n	8001be6 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afc:	68b3      	ldr	r3, [r6, #8]
 8001afe:	6862      	ldr	r2, [r4, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b08:	d1f2      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	079f      	lsls	r7, r3, #30
 8001b0e:	f140 80d3 	bpl.w	8001cb8 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	0758      	lsls	r0, r3, #29
 8001b14:	d504      	bpl.n	8001b20 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b16:	4982      	ldr	r1, [pc, #520]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b18:	688a      	ldr	r2, [r1, #8]
 8001b1a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001b1e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	0719      	lsls	r1, r3, #28
 8001b22:	d506      	bpl.n	8001b32 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b24:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b26:	6893      	ldr	r3, [r2, #8]
 8001b28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b30:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b32:	4a7b      	ldr	r2, [pc, #492]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b34:	68a1      	ldr	r1, [r4, #8]
 8001b36:	6893      	ldr	r3, [r2, #8]
 8001b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4e76      	ldr	r6, [pc, #472]	; (8001d1c <HAL_RCC_ClockConfig+0x2bc>)
 8001b42:	6832      	ldr	r2, [r6, #0]
 8001b44:	f002 020f 	and.w	r2, r2, #15
 8001b48:	42aa      	cmp	r2, r5
 8001b4a:	d837      	bhi.n	8001bbc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	075a      	lsls	r2, r3, #29
 8001b50:	d506      	bpl.n	8001b60 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b52:	4973      	ldr	r1, [pc, #460]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b54:	68e0      	ldr	r0, [r4, #12]
 8001b56:	688a      	ldr	r2, [r1, #8]
 8001b58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	071b      	lsls	r3, r3, #28
 8001b62:	d443      	bmi.n	8001bec <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b64:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b66:	6893      	ldr	r3, [r2, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	f000 80d3 	beq.w	8001d18 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b72:	6893      	ldr	r3, [r2, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	f000 809b 	beq.w	8001cb4 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b7e:	6893      	ldr	r3, [r2, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d075      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8a:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001b8c:	4c65      	ldr	r4, [pc, #404]	; (8001d24 <HAL_RCC_ClockConfig+0x2c4>)
 8001b8e:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 8001b90:	4865      	ldr	r0, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b92:	4966      	ldr	r1, [pc, #408]	; (8001d2c <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8001b94:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b96:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001b9a:	5ca2      	ldrb	r2, [r4, r2]
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	40d3      	lsrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
}
 8001ba4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8001ba8:	f7fe bee8 	b.w	800097c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	079e      	lsls	r6, r3, #30
 8001bae:	d4b0      	bmi.n	8001b12 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4e5a      	ldr	r6, [pc, #360]	; (8001d1c <HAL_RCC_ClockConfig+0x2bc>)
 8001bb2:	6832      	ldr	r2, [r6, #0]
 8001bb4:	f002 020f 	and.w	r2, r2, #15
 8001bb8:	42aa      	cmp	r2, r5
 8001bba:	d9c7      	bls.n	8001b4c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbc:	6832      	ldr	r2, [r6, #0]
 8001bbe:	f022 020f 	bic.w	r2, r2, #15
 8001bc2:	432a      	orrs	r2, r5
 8001bc4:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ff1f 	bl	8000a08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bce:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd0:	6833      	ldr	r3, [r6, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	42ab      	cmp	r3, r5
 8001bd8:	d0b8      	beq.n	8001b4c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7fe ff15 	bl	8000a08 <HAL_GetTick>
 8001bde:	eba0 0008 	sub.w	r0, r0, r8
 8001be2:	42b8      	cmp	r0, r7
 8001be4:	d9f4      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8001be6:	2003      	movs	r0, #3
}
 8001be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001bee:	6921      	ldr	r1, [r4, #16]
 8001bf0:	6893      	ldr	r3, [r2, #8]
 8001bf2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bfa:	6093      	str	r3, [r2, #8]
 8001bfc:	e7b2      	b.n	8001b64 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4948      	ldr	r1, [pc, #288]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001c00:	6808      	ldr	r0, [r1, #0]
 8001c02:	0180      	lsls	r0, r0, #6
 8001c04:	f57f af41 	bpl.w	8001a8a <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c08:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0a:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 8001c0c:	4f48      	ldr	r7, [pc, #288]	; (8001d30 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0e:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8001c12:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c14:	68ce      	ldr	r6, [r1, #12]
 8001c16:	bf0c      	ite	eq
 8001c18:	4946      	ldreq	r1, [pc, #280]	; (8001d34 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1a:	4947      	ldrne	r1, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001c20:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c22:	fbb1 f1f0 	udiv	r1, r1, r0
 8001c26:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2a:	4e3d      	ldr	r6, [pc, #244]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c30:	68f0      	ldr	r0, [r6, #12]
 8001c32:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001c36:	3001      	adds	r0, #1
 8001c38:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8001c3a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8001c3e:	42b9      	cmp	r1, r7
 8001c40:	f67f af48 	bls.w	8001ad4 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c44:	68b1      	ldr	r1, [r6, #8]
 8001c46:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x1fc>
 8001c4c:	f013 0802 	ands.w	r8, r3, #2
 8001c50:	f43f af42 	beq.w	8001ad8 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c54:	68a3      	ldr	r3, [r4, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f af3c 	bne.w	8001ad4 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c5c:	4930      	ldr	r1, [pc, #192]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001c5e:	688b      	ldr	r3, [r1, #8]
 8001c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c6a:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001c6e:	e733      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 8001c70:	2001      	movs	r0, #1
}
 8001c72:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c74:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c76:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c78:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7a:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 8001c82:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c84:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c88:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8c:	bf0c      	ite	eq
 8001c8e:	4b29      	ldreq	r3, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c90:	4b29      	ldrne	r3, [pc, #164]	; (8001d38 <HAL_RCC_ClockConfig+0x2d8>)
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
 8001c9c:	68d2      	ldr	r2, [r2, #12]
 8001c9e:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001ca2:	3201      	adds	r2, #1
 8001ca4:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8001ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001caa:	e76e      	b.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cac:	0399      	lsls	r1, r3, #14
 8001cae:	f53f af00 	bmi.w	8001ab2 <HAL_RCC_ClockConfig+0x52>
 8001cb2:	e6ea      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_ClockConfig+0x2d4>)
 8001cb6:	e768      	b.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8001cb8:	f1b8 0f00 	cmp.w	r8, #0
 8001cbc:	f43f af40 	beq.w	8001b40 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cc0:	68b3      	ldr	r3, [r6, #8]
 8001cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc6:	60b3      	str	r3, [r6, #8]
 8001cc8:	e73a      	b.n	8001b40 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ccc:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 8001cce:	4e18      	ldr	r6, [pc, #96]	; (8001d30 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd0:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8001cd4:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cd6:	68d8      	ldr	r0, [r3, #12]
 8001cd8:	bf0c      	ite	eq
 8001cda:	4b16      	ldreq	r3, [pc, #88]	; (8001d34 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cdc:	4b16      	ldrne	r3, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cde:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8001ce2:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce8:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cee:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf2:	68c1      	ldr	r1, [r0, #12]
 8001cf4:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8001cf8:	3101      	adds	r1, #1
 8001cfa:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 8001cfc:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8001d00:	42b3      	cmp	r3, r6
 8001d02:	f67f aee7 	bls.w	8001ad4 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d06:	6883      	ldr	r3, [r0, #8]
 8001d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d12:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001d16:	e6df      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_ClockConfig+0x2d8>)
 8001d1a:	e736      	b.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08002fb0 	.word	0x08002fb0
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	04c4b400 	.word	0x04c4b400
 8001d34:	016e3600 	.word	0x016e3600
 8001d38:	00f42400 	.word	0x00f42400

08001d3c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	f002 020c 	and.w	r2, r2, #12
 8001d44:	2a04      	cmp	r2, #4
 8001d46:	d027      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	f002 020c 	and.w	r2, r2, #12
 8001d4e:	2a08      	cmp	r2, #8
 8001d50:	d024      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	f002 020c 	and.w	r2, r2, #12
 8001d58:	2a0c      	cmp	r2, #12
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 8001d5c:	2000      	movs	r0, #0
}
 8001d5e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d60:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d62:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d64:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d66:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d6a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8001d6e:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d70:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d74:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d78:	bf0c      	ite	eq
 8001d7a:	480a      	ldreq	r0, [pc, #40]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d7c:	480a      	ldrne	r0, [pc, #40]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d82:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001d92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d96:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d9a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	016e3600 	.word	0x016e3600
 8001da8:	00f42400 	.word	0x00f42400

08001dac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001db2:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001db8:	6808      	ldr	r0, [r1, #0]
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
}
 8001dc0:	40d8      	lsrs	r0, r3
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002fc0 	.word	0x08002fc0
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001dd6:	4906      	ldr	r1, [pc, #24]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ddc:	6808      	ldr	r0, [r1, #0]
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
}
 8001de4:	40d8      	lsrs	r0, r3
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08002fc0 	.word	0x08002fc0
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df8:	6803      	ldr	r3, [r0, #0]
{
 8001dfa:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dfc:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8001e00:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e02:	d057      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4bb8      	ldr	r3, [pc, #736]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e08:	00d0      	lsls	r0, r2, #3
 8001e0a:	f140 813f 	bpl.w	800208c <HAL_RCCEx_PeriphCLKConfig+0x298>
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e10:	4db6      	ldr	r5, [pc, #728]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e1a:	f7fe fdf5 	bl	8000a08 <HAL_GetTick>
 8001e1e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e20:	e005      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe fdf1 	bl	8000a08 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	f200 8141 	bhi.w	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	05d9      	lsls	r1, r3, #23
 8001e32:	d5f6      	bpl.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e34:	4bac      	ldr	r3, [pc, #688]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e36:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001e38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3c:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001e40:	d028      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001e42:	428a      	cmp	r2, r1
 8001e44:	d026      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e46:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e56:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e62:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e66:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8001e68:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e6c:	d512      	bpl.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8001e70:	f7fe fdca 	bl	8000a08 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7a:	e006      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fdc4 	bl	8000a08 <HAL_GetTick>
 8001e80:	eba0 0008 	sub.w	r0, r0, r8
 8001e84:	42b0      	cmp	r0, r6
 8001e86:	f200 8113 	bhi.w	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e8e:	079b      	lsls	r3, r3, #30
 8001e90:	d5f4      	bpl.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8001e92:	6d21      	ldr	r1, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e94:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea4:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea6:	b127      	cbz	r7, 8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4a8f      	ldr	r2, [pc, #572]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001eaa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb4:	07dd      	lsls	r5, r3, #31
 8001eb6:	d508      	bpl.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb8:	498b      	ldr	r1, [pc, #556]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001eba:	6865      	ldr	r5, [r4, #4]
 8001ebc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ec0:	f022 0203 	bic.w	r2, r2, #3
 8001ec4:	432a      	orrs	r2, r5
 8001ec6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eca:	0799      	lsls	r1, r3, #30
 8001ecc:	d508      	bpl.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ece:	4986      	ldr	r1, [pc, #536]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ed0:	68a5      	ldr	r5, [r4, #8]
 8001ed2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ed6:	f022 020c 	bic.w	r2, r2, #12
 8001eda:	432a      	orrs	r2, r5
 8001edc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee0:	075a      	lsls	r2, r3, #29
 8001ee2:	d508      	bpl.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ee4:	4980      	ldr	r1, [pc, #512]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ee6:	68e5      	ldr	r5, [r4, #12]
 8001ee8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001ef0:	432a      	orrs	r2, r5
 8001ef2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef6:	071f      	lsls	r7, r3, #28
 8001ef8:	d508      	bpl.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efa:	497b      	ldr	r1, [pc, #492]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001efc:	6925      	ldr	r5, [r4, #16]
 8001efe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f06:	432a      	orrs	r2, r5
 8001f08:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f0c:	06de      	lsls	r6, r3, #27
 8001f0e:	d508      	bpl.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f10:	4975      	ldr	r1, [pc, #468]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f12:	6965      	ldr	r5, [r4, #20]
 8001f14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f1c:	432a      	orrs	r2, r5
 8001f1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f22:	069d      	lsls	r5, r3, #26
 8001f24:	d508      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f26:	4970      	ldr	r1, [pc, #448]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f28:	69a5      	ldr	r5, [r4, #24]
 8001f2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f32:	432a      	orrs	r2, r5
 8001f34:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f38:	0659      	lsls	r1, r3, #25
 8001f3a:	d508      	bpl.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3c:	496a      	ldr	r1, [pc, #424]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f3e:	69e5      	ldr	r5, [r4, #28]
 8001f40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f48:	432a      	orrs	r2, r5
 8001f4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f4e:	061a      	lsls	r2, r3, #24
 8001f50:	d508      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f54:	6a25      	ldr	r5, [r4, #32]
 8001f56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f5e:	432a      	orrs	r2, r5
 8001f60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f64:	05df      	lsls	r7, r3, #23
 8001f66:	d508      	bpl.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f68:	495f      	ldr	r1, [pc, #380]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001f6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f74:	432a      	orrs	r2, r5
 8001f76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f7a:	039e      	lsls	r6, r3, #14
 8001f7c:	d508      	bpl.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f7e:	495a      	ldr	r1, [pc, #360]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f80:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001f82:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001f86:	f022 0203 	bic.w	r2, r2, #3
 8001f8a:	432a      	orrs	r2, r5
 8001f8c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f90:	059d      	lsls	r5, r3, #22
 8001f92:	d508      	bpl.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f94:	4954      	ldr	r1, [pc, #336]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f96:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001f98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f9c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001fa0:	432a      	orrs	r2, r5
 8001fa2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fa6:	0559      	lsls	r1, r3, #21
 8001fa8:	d50b      	bpl.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001faa:	494f      	ldr	r1, [pc, #316]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001fae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fb2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fb6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001fb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fbc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001fc0:	d078      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fc2:	051a      	lsls	r2, r3, #20
 8001fc4:	d50b      	bpl.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc6:	4948      	ldr	r1, [pc, #288]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fc8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001fca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001fd2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fd4:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fdc:	d06f      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fde:	04df      	lsls	r7, r3, #19
 8001fe0:	d50b      	bpl.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fe2:	4941      	ldr	r1, [pc, #260]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fe4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fea:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fee:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ff0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ff4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ff8:	d066      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ffa:	049e      	lsls	r6, r3, #18
 8001ffc:	d50b      	bpl.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffe:	493a      	ldr	r1, [pc, #232]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002000:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002002:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002006:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800200a:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800200c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002010:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002014:	d05d      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002016:	045d      	lsls	r5, r3, #17
 8002018:	d50b      	bpl.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800201a:	4933      	ldr	r1, [pc, #204]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800201c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800201e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002022:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002026:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002028:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800202c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002030:	d054      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002032:	0419      	lsls	r1, r3, #16
 8002034:	d50b      	bpl.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002036:	492c      	ldr	r1, [pc, #176]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002038:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800203a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800203e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002042:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002044:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800204c:	d050      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800204e:	03da      	lsls	r2, r3, #15
 8002050:	d50b      	bpl.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002052:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002054:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002056:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800205a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800205e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002060:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002064:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002068:	d047      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x306>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800206a:	035b      	lsls	r3, r3, #13
 800206c:	d50b      	bpl.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002070:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002072:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002076:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800207a:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800207c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002080:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002084:	d00d      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  }

#endif /* QUADSPI */

  return status;
}
 8002086:	b002      	add	sp, #8
 8002088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800208e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002092:	659a      	str	r2, [r3, #88]	; 0x58
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800209e:	2701      	movs	r7, #1
 80020a0:	e6b6      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a2:	68d3      	ldr	r3, [r2, #12]
 80020a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a8:	60d3      	str	r3, [r2, #12]
}
 80020aa:	b002      	add	sp, #8
 80020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
 80020b2:	e6f8      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	68ca      	ldr	r2, [r1, #12]
 80020b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ba:	60ca      	str	r2, [r1, #12]
 80020bc:	e781      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020be:	68ca      	ldr	r2, [r1, #12]
 80020c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020c4:	60ca      	str	r2, [r1, #12]
 80020c6:	e78a      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c8:	68ca      	ldr	r2, [r1, #12]
 80020ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020ce:	60ca      	str	r2, [r1, #12]
 80020d0:	e793      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d2:	68ca      	ldr	r2, [r1, #12]
 80020d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020d8:	60ca      	str	r2, [r1, #12]
 80020da:	e79c      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020dc:	68ca      	ldr	r2, [r1, #12]
 80020de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020e2:	60ca      	str	r2, [r1, #12]
 80020e4:	e7a5      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020f0:	68ca      	ldr	r2, [r1, #12]
 80020f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f6:	60ca      	str	r2, [r1, #12]
 80020f8:	e7a9      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020fa:	68ca      	ldr	r2, [r1, #12]
 80020fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002100:	60ca      	str	r2, [r1, #12]
 8002102:	e7b2      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x276>

08002104 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002104:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002106:	07da      	lsls	r2, r3, #31
{
 8002108:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800210a:	d506      	bpl.n	800211a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800210c:	6801      	ldr	r1, [r0, #0]
 800210e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002110:	684a      	ldr	r2, [r1, #4]
 8002112:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002116:	4322      	orrs	r2, r4
 8002118:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800211a:	079c      	lsls	r4, r3, #30
 800211c:	d506      	bpl.n	800212c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800211e:	6801      	ldr	r1, [r0, #0]
 8002120:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002122:	684a      	ldr	r2, [r1, #4]
 8002124:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002128:	4322      	orrs	r2, r4
 800212a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800212c:	0759      	lsls	r1, r3, #29
 800212e:	d506      	bpl.n	800213e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002130:	6801      	ldr	r1, [r0, #0]
 8002132:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002134:	684a      	ldr	r2, [r1, #4]
 8002136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800213a:	4322      	orrs	r2, r4
 800213c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800213e:	071a      	lsls	r2, r3, #28
 8002140:	d506      	bpl.n	8002150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002142:	6801      	ldr	r1, [r0, #0]
 8002144:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002146:	684a      	ldr	r2, [r1, #4]
 8002148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214c:	4322      	orrs	r2, r4
 800214e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002150:	06dc      	lsls	r4, r3, #27
 8002152:	d506      	bpl.n	8002162 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002154:	6801      	ldr	r1, [r0, #0]
 8002156:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002158:	688a      	ldr	r2, [r1, #8]
 800215a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800215e:	4322      	orrs	r2, r4
 8002160:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002162:	0699      	lsls	r1, r3, #26
 8002164:	d506      	bpl.n	8002174 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002166:	6801      	ldr	r1, [r0, #0]
 8002168:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800216a:	688a      	ldr	r2, [r1, #8]
 800216c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002170:	4322      	orrs	r2, r4
 8002172:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002174:	065a      	lsls	r2, r3, #25
 8002176:	d509      	bpl.n	800218c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002178:	6801      	ldr	r1, [r0, #0]
 800217a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800217c:	684a      	ldr	r2, [r1, #4]
 800217e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002182:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002184:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002188:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800218a:	d00b      	beq.n	80021a4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	d506      	bpl.n	800219e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002194:	6853      	ldr	r3, [r2, #4]
 8002196:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800219a:	430b      	orrs	r3, r1
 800219c:	6053      	str	r3, [r2, #4]
  }
}
 800219e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021a4:	684a      	ldr	r2, [r1, #4]
 80021a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80021a8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021ac:	4322      	orrs	r2, r4
 80021ae:	604a      	str	r2, [r1, #4]
 80021b0:	e7ec      	b.n	800218c <UART_AdvFeatureConfig+0x88>
 80021b2:	bf00      	nop
 80021b4:	0000      	movs	r0, r0
	...

080021b8 <HAL_UART_Init>:
  if (huart == NULL)
 80021b8:	2800      	cmp	r0, #0
 80021ba:	f000 8279 	beq.w	80026b0 <HAL_UART_Init+0x4f8>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80021c2:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80021c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05d      	beq.n	8002288 <HAL_UART_Init+0xd0>
  __HAL_UART_DISABLE(huart);
 80021cc:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021ce:	48c1      	ldr	r0, [pc, #772]	; (80024d4 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	2224      	movs	r2, #36	; 0x24
 80021d2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021d6:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80021da:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021dc:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80021de:	f021 0101 	bic.w	r1, r1, #1
 80021e2:	6019      	str	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021e4:	4332      	orrs	r2, r6
 80021e6:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e8:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ea:	432a      	orrs	r2, r5
  tmpreg |= (uint32_t)huart->FifoMode;
 80021ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f0:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 80021f2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f4:	4302      	orrs	r2, r0
 80021f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021fc:	48b6      	ldr	r0, [pc, #728]	; (80024d8 <HAL_UART_Init+0x320>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021fe:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002200:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002204:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002206:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800220c:	d041      	beq.n	8002292 <HAL_UART_Init+0xda>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800220e:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002210:	6a22      	ldr	r2, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002212:	4fb2      	ldr	r7, [pc, #712]	; (80024dc <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002214:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8002218:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800221c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800221e:	4302      	orrs	r2, r0
 8002220:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	f022 020f 	bic.w	r2, r2, #15
 8002228:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800222a:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800222e:	f000 8095 	beq.w	800235c <HAL_UART_Init+0x1a4>
 8002232:	4aab      	ldr	r2, [pc, #684]	; (80024e0 <HAL_UART_Init+0x328>)
 8002234:	4293      	cmp	r3, r2
 8002236:	f000 80aa 	beq.w	800238e <HAL_UART_Init+0x1d6>
 800223a:	4aaa      	ldr	r2, [pc, #680]	; (80024e4 <HAL_UART_Init+0x32c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	f000 819c 	beq.w	800257a <HAL_UART_Init+0x3c2>
 8002242:	4aa9      	ldr	r2, [pc, #676]	; (80024e8 <HAL_UART_Init+0x330>)
 8002244:	4293      	cmp	r3, r2
 8002246:	f000 8159 	beq.w	80024fc <HAL_UART_Init+0x344>
 800224a:	4aa8      	ldr	r2, [pc, #672]	; (80024ec <HAL_UART_Init+0x334>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d112      	bne.n	8002276 <HAL_UART_Init+0xbe>
 8002250:	4ba7      	ldr	r3, [pc, #668]	; (80024f0 <HAL_UART_Init+0x338>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225e:	f000 810d 	beq.w	800247c <HAL_UART_Init+0x2c4>
 8002262:	f240 81c2 	bls.w	80025ea <HAL_UART_Init+0x432>
 8002266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226a:	f000 8192 	beq.w	8002592 <HAL_UART_Init+0x3da>
 800226e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002272:	f000 8150 	beq.w	8002516 <HAL_UART_Init+0x35e>
  huart->RxISR = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800227c:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002280:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 8002282:	2001      	movs	r0, #1
}
 8002284:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    huart->Lock = HAL_UNLOCKED;
 8002288:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800228c:	f7fe faf0 	bl	8000870 <HAL_UART_MspInit>
 8002290:	e79c      	b.n	80021cc <HAL_UART_Init+0x14>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002292:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002294:	4896      	ldr	r0, [pc, #600]	; (80024f0 <HAL_UART_Init+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002296:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800229a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800229e:	4331      	orrs	r1, r6
 80022a0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	f022 020f 	bic.w	r2, r2, #15
 80022a8:	432a      	orrs	r2, r5
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80022b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b8:	f000 822e 	beq.w	8002718 <HAL_UART_Init+0x560>
 80022bc:	f240 81fa 	bls.w	80026b4 <HAL_UART_Init+0x4fc>
 80022c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c4:	f000 8370 	beq.w	80029a8 <HAL_UART_Init+0x7f0>
 80022c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80022cc:	d1d3      	bne.n	8002276 <HAL_UART_Init+0xbe>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	f000 8391 	beq.w	80029f6 <HAL_UART_Init+0x83e>
 80022d4:	2d01      	cmp	r5, #1
 80022d6:	f000 83b9 	beq.w	8002a4c <HAL_UART_Init+0x894>
 80022da:	2d02      	cmp	r5, #2
 80022dc:	f000 83c9 	beq.w	8002a72 <HAL_UART_Init+0x8ba>
 80022e0:	2d03      	cmp	r5, #3
 80022e2:	f000 83e3 	beq.w	8002aac <HAL_UART_Init+0x8f4>
 80022e6:	2d04      	cmp	r5, #4
 80022e8:	f000 83ff 	beq.w	8002aea <HAL_UART_Init+0x932>
 80022ec:	2d05      	cmp	r5, #5
 80022ee:	f000 8418 	beq.w	8002b22 <HAL_UART_Init+0x96a>
 80022f2:	2d06      	cmp	r5, #6
 80022f4:	f000 843c 	beq.w	8002b70 <HAL_UART_Init+0x9b8>
 80022f8:	2d07      	cmp	r5, #7
 80022fa:	f000 848d 	beq.w	8002c18 <HAL_UART_Init+0xa60>
 80022fe:	2d08      	cmp	r5, #8
 8002300:	f000 848f 	beq.w	8002c22 <HAL_UART_Init+0xa6a>
 8002304:	2d09      	cmp	r5, #9
 8002306:	f000 84ad 	beq.w	8002c64 <HAL_UART_Init+0xaac>
 800230a:	2d0a      	cmp	r5, #10
 800230c:	f000 84ee 	beq.w	8002cec <HAL_UART_Init+0xb34>
 8002310:	2d0b      	cmp	r5, #11
 8002312:	bf0c      	ite	eq
 8002314:	2080      	moveq	r0, #128	; 0x80
 8002316:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800231a:	2308      	movs	r3, #8
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002322:	4281      	cmp	r1, r0
 8002324:	d8a7      	bhi.n	8002276 <HAL_UART_Init+0xbe>
 8002326:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800232a:	d8a4      	bhi.n	8002276 <HAL_UART_Init+0xbe>
        switch (clocksource)
 800232c:	2b08      	cmp	r3, #8
 800232e:	d8a2      	bhi.n	8002276 <HAL_UART_Init+0xbe>
 8002330:	a101      	add	r1, pc, #4	; (adr r1, 8002338 <HAL_UART_Init+0x180>)
 8002332:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	08002931 	.word	0x08002931
 800233c:	08002277 	.word	0x08002277
 8002340:	080028e5 	.word	0x080028e5
 8002344:	08002277 	.word	0x08002277
 8002348:	080029a3 	.word	0x080029a3
 800234c:	08002277 	.word	0x08002277
 8002350:	08002277 	.word	0x08002277
 8002354:	08002277 	.word	0x08002277
 8002358:	0800286d 	.word	0x0800286d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_UART_Init+0x338>)
 800235e:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_UART_Init+0x33c>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800236e:	f000 8187 	beq.w	8002680 <HAL_UART_Init+0x4c8>
    switch (clocksource)
 8002372:	2b08      	cmp	r3, #8
 8002374:	f200 84d4 	bhi.w	8002d20 <HAL_UART_Init+0xb68>
 8002378:	e8df f013 	tbh	[pc, r3, lsl #1]
 800237c:	001100f8 	.word	0x001100f8
 8002380:	04d2010f 	.word	0x04d2010f
 8002384:	04d20084 	.word	0x04d20084
 8002388:	04d204d2 	.word	0x04d204d2
 800238c:	00d1      	.short	0x00d1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_UART_Init+0x338>)
 8002390:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <HAL_UART_Init+0x340>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	e7e5      	b.n	800236a <HAL_UART_Init+0x1b2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800239e:	f7ff fd17 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d172      	bne.n	800248e <HAL_UART_Init+0x2d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023a8:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023aa:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023ac:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 80023b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b6:	f1a3 0010 	sub.w	r0, r3, #16
 80023ba:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80023be:	4288      	cmp	r0, r1
 80023c0:	f63f af59 	bhi.w	8002276 <HAL_UART_Init+0xbe>
      huart->Instance->BRR = usartdiv;
 80023c4:	6825      	ldr	r5, [r4, #0]
  huart->RxISR = NULL;
 80023c6:	2100      	movs	r1, #0
  huart->NbRxDataToProcess = 1;
 80023c8:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      huart->Instance->BRR = usartdiv;
 80023cc:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 80023ce:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80023d2:	6721      	str	r1, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023d4:	2a00      	cmp	r2, #0
 80023d6:	f47f af54 	bne.w	8002282 <HAL_UART_Init+0xca>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 814b 	bne.w	8002678 <HAL_UART_Init+0x4c0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023f4:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002402:	f7fe fb01 	bl	8000a08 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800240c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800240e:	d40c      	bmi.n	800242a <HAL_UART_Init+0x272>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	0752      	lsls	r2, r2, #29
 8002414:	d426      	bmi.n	8002464 <HAL_UART_Init+0x2ac>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002416:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8002418:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800241a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800241e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002422:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8002426:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	69dd      	ldr	r5, [r3, #28]
 800242c:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8002430:	d1ee      	bne.n	8002410 <HAL_UART_Init+0x258>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fae9 	bl	8000a08 <HAL_GetTick>
 8002436:	1b80      	subs	r0, r0, r6
 8002438:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800243c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	d3f4      	bcc.n	800242a <HAL_UART_Init+0x272>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002446:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002448:	689a      	ldr	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800244a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8002452:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8002454:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;

        __HAL_UNLOCK(huart);
 8002458:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800245c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8002460:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002464:	69dd      	ldr	r5, [r3, #28]
 8002466:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800246a:	d1d4      	bne.n	8002416 <HAL_UART_Init+0x25e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7fe facc 	bl	8000a08 <HAL_GetTick>
 8002470:	1b80      	subs	r0, r0, r6
 8002472:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002476:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002478:	d3f4      	bcc.n	8002464 <HAL_UART_Init+0x2ac>
 800247a:	e7e1      	b.n	8002440 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002480:	f000 818d 	beq.w	800279e <HAL_UART_Init+0x5e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002484:	f7ff fc5a 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d08c      	beq.n	80023a8 <HAL_UART_Init+0x1f0>
 800248e:	2b01      	cmp	r3, #1
 8002490:	f000 82af 	beq.w	80029f2 <HAL_UART_Init+0x83a>
 8002494:	2b02      	cmp	r3, #2
 8002496:	f000 8180 	beq.w	800279a <HAL_UART_Init+0x5e2>
 800249a:	2b03      	cmp	r3, #3
 800249c:	f000 817a 	beq.w	8002794 <HAL_UART_Init+0x5dc>
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	f000 82b9 	beq.w	8002a18 <HAL_UART_Init+0x860>
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	f000 82b3 	beq.w	8002a12 <HAL_UART_Init+0x85a>
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	f000 82ee 	beq.w	8002a8e <HAL_UART_Init+0x8d6>
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	f000 830f 	beq.w	8002ad6 <HAL_UART_Init+0x91e>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	f000 8323 	beq.w	8002b04 <HAL_UART_Init+0x94c>
 80024be:	2b09      	cmp	r3, #9
 80024c0:	f000 835d 	beq.w	8002b7e <HAL_UART_Init+0x9c6>
 80024c4:	2b0a      	cmp	r3, #10
 80024c6:	f000 8358 	beq.w	8002b7a <HAL_UART_Init+0x9c2>
 80024ca:	2b0b      	cmp	r3, #11
 80024cc:	bf08      	it	eq
 80024ce:	0a00      	lsreq	r0, r0, #8
 80024d0:	e76a      	b.n	80023a8 <HAL_UART_Init+0x1f0>
 80024d2:	bf00      	nop
 80024d4:	cfff69f3 	.word	0xcfff69f3
 80024d8:	40008000 	.word	0x40008000
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40004400 	.word	0x40004400
 80024e4:	40004800 	.word	0x40004800
 80024e8:	40004c00 	.word	0x40004c00
 80024ec:	40005000 	.word	0x40005000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08002fd8 	.word	0x08002fd8
 80024f8:	08002fdc 	.word	0x08002fdc
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024fc:	4bd6      	ldr	r3, [pc, #856]	; (8002858 <HAL_UART_Init+0x6a0>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d0b8      	beq.n	800247c <HAL_UART_Init+0x2c4>
 800250a:	d96e      	bls.n	80025ea <HAL_UART_Init+0x432>
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d040      	beq.n	8002592 <HAL_UART_Init+0x3da>
 8002510:	2bc0      	cmp	r3, #192	; 0xc0
 8002512:	f47f aeb0 	bne.w	8002276 <HAL_UART_Init+0xbe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002516:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800251a:	f000 8174 	beq.w	8002806 <HAL_UART_Init+0x64e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800251e:	2d00      	cmp	r5, #0
 8002520:	f000 812e 	beq.w	8002780 <HAL_UART_Init+0x5c8>
 8002524:	2d01      	cmp	r5, #1
 8002526:	f000 827b 	beq.w	8002a20 <HAL_UART_Init+0x868>
 800252a:	2d02      	cmp	r5, #2
 800252c:	f000 8299 	beq.w	8002a62 <HAL_UART_Init+0x8aa>
 8002530:	2d03      	cmp	r5, #3
 8002532:	f000 82a5 	beq.w	8002a80 <HAL_UART_Init+0x8c8>
 8002536:	2d04      	cmp	r5, #4
 8002538:	f000 82c8 	beq.w	8002acc <HAL_UART_Init+0x914>
 800253c:	2d05      	cmp	r5, #5
 800253e:	f000 82de 	beq.w	8002afe <HAL_UART_Init+0x946>
 8002542:	2d06      	cmp	r5, #6
 8002544:	f000 82f4 	beq.w	8002b30 <HAL_UART_Init+0x978>
 8002548:	2d07      	cmp	r5, #7
 800254a:	f000 831c 	beq.w	8002b86 <HAL_UART_Init+0x9ce>
 800254e:	2d08      	cmp	r5, #8
 8002550:	f000 832e 	beq.w	8002bb0 <HAL_UART_Init+0x9f8>
 8002554:	2d09      	cmp	r5, #9
 8002556:	f000 839f 	beq.w	8002c98 <HAL_UART_Init+0xae0>
 800255a:	2d0a      	cmp	r5, #10
 800255c:	f000 8399 	beq.w	8002c92 <HAL_UART_Init+0xada>
 8002560:	2d0b      	cmp	r5, #11
 8002562:	bf14      	ite	ne
 8002564:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002568:	2380      	moveq	r3, #128	; 0x80
 800256a:	e101      	b.n	8002770 <HAL_UART_Init+0x5b8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800256c:	f7ff fc1e 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	f43f af18 	beq.w	80023a8 <HAL_UART_Init+0x1f0>
 8002578:	e789      	b.n	800248e <HAL_UART_Init+0x2d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800257a:	4bb7      	ldr	r3, [pc, #732]	; (8002858 <HAL_UART_Init+0x6a0>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002584:	2b10      	cmp	r3, #16
 8002586:	f43f af79 	beq.w	800247c <HAL_UART_Init+0x2c4>
 800258a:	d92e      	bls.n	80025ea <HAL_UART_Init+0x432>
 800258c:	2b20      	cmp	r3, #32
 800258e:	f040 80ea 	bne.w	8002766 <HAL_UART_Init+0x5ae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002592:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002596:	f000 8109 	beq.w	80027ac <HAL_UART_Init+0x5f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800259a:	2d00      	cmp	r5, #0
 800259c:	f000 80e7 	beq.w	800276e <HAL_UART_Init+0x5b6>
 80025a0:	2d01      	cmp	r5, #1
 80025a2:	f000 823b 	beq.w	8002a1c <HAL_UART_Init+0x864>
 80025a6:	2d02      	cmp	r5, #2
 80025a8:	f000 8259 	beq.w	8002a5e <HAL_UART_Init+0x8a6>
 80025ac:	2d03      	cmp	r5, #3
 80025ae:	f000 826c 	beq.w	8002a8a <HAL_UART_Init+0x8d2>
 80025b2:	2d04      	cmp	r5, #4
 80025b4:	f000 828d 	beq.w	8002ad2 <HAL_UART_Init+0x91a>
 80025b8:	2d05      	cmp	r5, #5
 80025ba:	f000 829e 	beq.w	8002afa <HAL_UART_Init+0x942>
 80025be:	2d06      	cmp	r5, #6
 80025c0:	f000 82b4 	beq.w	8002b2c <HAL_UART_Init+0x974>
 80025c4:	2d07      	cmp	r5, #7
 80025c6:	f000 82dc 	beq.w	8002b82 <HAL_UART_Init+0x9ca>
 80025ca:	2d08      	cmp	r5, #8
 80025cc:	f000 82ee 	beq.w	8002bac <HAL_UART_Init+0x9f4>
 80025d0:	2d09      	cmp	r5, #9
 80025d2:	f000 834e 	beq.w	8002c72 <HAL_UART_Init+0xaba>
 80025d6:	2d0a      	cmp	r5, #10
 80025d8:	f000 8349 	beq.w	8002c6e <HAL_UART_Init+0xab6>
 80025dc:	4b9f      	ldr	r3, [pc, #636]	; (800285c <HAL_UART_Init+0x6a4>)
 80025de:	f24f 4224 	movw	r2, #62500	; 0xf424
 80025e2:	2d0b      	cmp	r5, #11
 80025e4:	bf08      	it	eq
 80025e6:	4613      	moveq	r3, r2
 80025e8:	e0c2      	b.n	8002770 <HAL_UART_Init+0x5b8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f ae43 	bne.w	8002276 <HAL_UART_Init+0xbe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80025f4:	d1ba      	bne.n	800256c <HAL_UART_Init+0x3b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f6:	f7ff fbd9 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025fc:	b302      	cbz	r2, 8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025fe:	2a01      	cmp	r2, #1
 8002600:	f000 8200 	beq.w	8002a04 <HAL_UART_Init+0x84c>
 8002604:	2a02      	cmp	r2, #2
 8002606:	f000 820e 	beq.w	8002a26 <HAL_UART_Init+0x86e>
 800260a:	2a03      	cmp	r2, #3
 800260c:	f000 8222 	beq.w	8002a54 <HAL_UART_Init+0x89c>
 8002610:	2a04      	cmp	r2, #4
 8002612:	f000 8238 	beq.w	8002a86 <HAL_UART_Init+0x8ce>
 8002616:	2a05      	cmp	r2, #5
 8002618:	f000 8254 	beq.w	8002ac4 <HAL_UART_Init+0x90c>
 800261c:	2a06      	cmp	r2, #6
 800261e:	f000 8273 	beq.w	8002b08 <HAL_UART_Init+0x950>
 8002622:	2a07      	cmp	r2, #7
 8002624:	f000 8287 	beq.w	8002b36 <HAL_UART_Init+0x97e>
 8002628:	2a08      	cmp	r2, #8
 800262a:	f000 82b4 	beq.w	8002b96 <HAL_UART_Init+0x9de>
 800262e:	2a09      	cmp	r2, #9
 8002630:	f000 8312 	beq.w	8002c58 <HAL_UART_Init+0xaa0>
 8002634:	2a0a      	cmp	r2, #10
 8002636:	f000 830d 	beq.w	8002c54 <HAL_UART_Init+0xa9c>
 800263a:	2a0b      	cmp	r2, #11
 800263c:	bf08      	it	eq
 800263e:	0a00      	lsreq	r0, r0, #8
 8002640:	6862      	ldr	r2, [r4, #4]
 8002642:	0853      	lsrs	r3, r2, #1
 8002644:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002648:	fbb3 f3f2 	udiv	r3, r3, r2
 800264c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800264e:	f1a3 0110 	sub.w	r1, r3, #16
 8002652:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002656:	4291      	cmp	r1, r2
 8002658:	f63f ae0d 	bhi.w	8002276 <HAL_UART_Init+0xbe>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265c:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8002660:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002662:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002666:	4313      	orrs	r3, r2
  huart->NbRxDataToProcess = 1;
 8002668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 800266c:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 800266e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8002670:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002674:	6722      	str	r2, [r4, #112]	; 0x70
 8002676:	e6b0      	b.n	80023da <HAL_UART_Init+0x222>
    UART_AdvFeatureConfig(huart);
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fd43 	bl	8002104 <UART_AdvFeatureConfig>
 800267e:	e6b0      	b.n	80023e2 <HAL_UART_Init+0x22a>
    switch (clocksource)
 8002680:	2b08      	cmp	r3, #8
 8002682:	f63f adf8 	bhi.w	8002276 <HAL_UART_Init+0xbe>
 8002686:	a201      	add	r2, pc, #4	; (adr r2, 800268c <HAL_UART_Init+0x4d4>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	080025f7 	.word	0x080025f7
 8002690:	08002787 	.word	0x08002787
 8002694:	080027ad 	.word	0x080027ad
 8002698:	08002277 	.word	0x08002277
 800269c:	0800279f 	.word	0x0800279f
 80026a0:	08002277 	.word	0x08002277
 80026a4:	08002277 	.word	0x08002277
 80026a8:	08002277 	.word	0x08002277
 80026ac:	08002807 	.word	0x08002807
    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
}
 80026b2:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f adde 	bne.w	8002276 <HAL_UART_Init+0xbe>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80026ba:	f7ff fb77 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 80026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c0:	b303      	cbz	r3, 8002704 <HAL_UART_Init+0x54c>
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f000 81bb 	beq.w	8002a3e <HAL_UART_Init+0x886>
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	f000 81b6 	beq.w	8002a3a <HAL_UART_Init+0x882>
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	f000 81b0 	beq.w	8002a34 <HAL_UART_Init+0x87c>
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	f000 81e2 	beq.w	8002a9e <HAL_UART_Init+0x8e6>
 80026da:	2b05      	cmp	r3, #5
 80026dc:	f000 81dc 	beq.w	8002a98 <HAL_UART_Init+0x8e0>
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	f000 8241 	beq.w	8002b68 <HAL_UART_Init+0x9b0>
 80026e6:	2b07      	cmp	r3, #7
 80026e8:	f000 8294 	beq.w	8002c14 <HAL_UART_Init+0xa5c>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	f000 82a3 	beq.w	8002c38 <HAL_UART_Init+0xa80>
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	f000 82bf 	beq.w	8002c76 <HAL_UART_Init+0xabe>
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	f000 82f5 	beq.w	8002ce8 <HAL_UART_Init+0xb30>
 80026fe:	2b0b      	cmp	r3, #11
 8002700:	bf08      	it	eq
 8002702:	0a00      	lsreq	r0, r0, #8
{
 8002704:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002706:	2800      	cmp	r0, #0
 8002708:	f47f ae08 	bne.w	800231c <HAL_UART_Init+0x164>
  huart->NbRxDataToProcess = 1;
 800270c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  huart->TxISR = NULL;
 8002710:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 8002714:	66a3      	str	r3, [r4, #104]	; 0x68
 8002716:	e660      	b.n	80023da <HAL_UART_Init+0x222>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002718:	f7ff fb10 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 800271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271e:	b303      	cbz	r3, 8002762 <HAL_UART_Init+0x5aa>
 8002720:	2b01      	cmp	r3, #1
 8002722:	f000 8191 	beq.w	8002a48 <HAL_UART_Init+0x890>
 8002726:	2b02      	cmp	r3, #2
 8002728:	f000 8182 	beq.w	8002a30 <HAL_UART_Init+0x878>
 800272c:	2b03      	cmp	r3, #3
 800272e:	f000 817c 	beq.w	8002a2a <HAL_UART_Init+0x872>
 8002732:	2b04      	cmp	r3, #4
 8002734:	f000 81b8 	beq.w	8002aa8 <HAL_UART_Init+0x8f0>
 8002738:	2b05      	cmp	r3, #5
 800273a:	f000 81b2 	beq.w	8002aa2 <HAL_UART_Init+0x8ea>
 800273e:	2b06      	cmp	r3, #6
 8002740:	f000 81fe 	beq.w	8002b40 <HAL_UART_Init+0x988>
 8002744:	2b07      	cmp	r3, #7
 8002746:	f000 822f 	beq.w	8002ba8 <HAL_UART_Init+0x9f0>
 800274a:	2b08      	cmp	r3, #8
 800274c:	f000 8276 	beq.w	8002c3c <HAL_UART_Init+0xa84>
 8002750:	2b09      	cmp	r3, #9
 8002752:	f000 829c 	beq.w	8002c8e <HAL_UART_Init+0xad6>
 8002756:	2b0a      	cmp	r3, #10
 8002758:	f000 82b5 	beq.w	8002cc6 <HAL_UART_Init+0xb0e>
 800275c:	2b0b      	cmp	r3, #11
 800275e:	bf08      	it	eq
 8002760:	0a00      	lsreq	r0, r0, #8
{
 8002762:	2304      	movs	r3, #4
 8002764:	e7cf      	b.n	8002706 <HAL_UART_Init+0x54e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002766:	2b30      	cmp	r3, #48	; 0x30
 8002768:	f43f aed5 	beq.w	8002516 <HAL_UART_Init+0x35e>
 800276c:	e583      	b.n	8002276 <HAL_UART_Init+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_UART_Init+0x6a4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002770:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002772:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002774:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8002778:	fbb3 f3f1 	udiv	r3, r3, r1
 800277c:	b29b      	uxth	r3, r3
 800277e:	e61a      	b.n	80023b6 <HAL_UART_Init+0x1fe>
 8002780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002784:	e7f4      	b.n	8002770 <HAL_UART_Init+0x5b8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002786:	f7ff fb23 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800278a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800278c:	2a00      	cmp	r2, #0
 800278e:	f43f af57 	beq.w	8002640 <HAL_UART_Init+0x488>
 8002792:	e734      	b.n	80025fe <HAL_UART_Init+0x446>
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_UART_Init+0x6a8>)
 8002796:	fba3 3000 	umull	r3, r0, r3, r0
 800279a:	0880      	lsrs	r0, r0, #2
 800279c:	e604      	b.n	80023a8 <HAL_UART_Init+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800279e:	f7ff facd 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	f43f af4b 	beq.w	8002640 <HAL_UART_Init+0x488>
 80027aa:	e728      	b.n	80025fe <HAL_UART_Init+0x446>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	f000 812b 	beq.w	8002a08 <HAL_UART_Init+0x850>
 80027b2:	2d01      	cmp	r5, #1
 80027b4:	f000 8158 	beq.w	8002a68 <HAL_UART_Init+0x8b0>
 80027b8:	2d02      	cmp	r5, #2
 80027ba:	f000 817b 	beq.w	8002ab4 <HAL_UART_Init+0x8fc>
 80027be:	2d03      	cmp	r5, #3
 80027c0:	f000 818e 	beq.w	8002ae0 <HAL_UART_Init+0x928>
 80027c4:	2d04      	cmp	r5, #4
 80027c6:	f000 81aa 	beq.w	8002b1e <HAL_UART_Init+0x966>
 80027ca:	2d05      	cmp	r5, #5
 80027cc:	f000 81c7 	beq.w	8002b5e <HAL_UART_Init+0x9a6>
 80027d0:	2d06      	cmp	r5, #6
 80027d2:	f000 821d 	beq.w	8002c10 <HAL_UART_Init+0xa58>
 80027d6:	2d07      	cmp	r5, #7
 80027d8:	f000 822c 	beq.w	8002c34 <HAL_UART_Init+0xa7c>
 80027dc:	2d08      	cmp	r5, #8
 80027de:	f000 825e 	beq.w	8002c9e <HAL_UART_Init+0xae6>
 80027e2:	2d09      	cmp	r5, #9
 80027e4:	f000 826a 	beq.w	8002cbc <HAL_UART_Init+0xb04>
 80027e8:	2d0a      	cmp	r5, #10
 80027ea:	f000 8271 	beq.w	8002cd0 <HAL_UART_Init+0xb18>
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_UART_Init+0x6ac>)
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_UART_Init+0x6b0>)
 80027f2:	2d0b      	cmp	r5, #11
 80027f4:	bf08      	it	eq
 80027f6:	4613      	moveq	r3, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027f8:	6862      	ldr	r2, [r4, #4]
 80027fa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80027fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	e723      	b.n	800264e <HAL_UART_Init+0x496>
 8002806:	2d00      	cmp	r5, #0
 8002808:	f000 8100 	beq.w	8002a0c <HAL_UART_Init+0x854>
 800280c:	2d01      	cmp	r5, #1
 800280e:	f000 812d 	beq.w	8002a6c <HAL_UART_Init+0x8b4>
 8002812:	2d02      	cmp	r5, #2
 8002814:	f000 8150 	beq.w	8002ab8 <HAL_UART_Init+0x900>
 8002818:	2d03      	cmp	r5, #3
 800281a:	f000 8163 	beq.w	8002ae4 <HAL_UART_Init+0x92c>
 800281e:	2d04      	cmp	r5, #4
 8002820:	f000 8176 	beq.w	8002b10 <HAL_UART_Init+0x958>
 8002824:	2d05      	cmp	r5, #5
 8002826:	f000 819c 	beq.w	8002b62 <HAL_UART_Init+0x9aa>
 800282a:	2d06      	cmp	r5, #6
 800282c:	f000 81ed 	beq.w	8002c0a <HAL_UART_Init+0xa52>
 8002830:	2d07      	cmp	r5, #7
 8002832:	f000 8205 	beq.w	8002c40 <HAL_UART_Init+0xa88>
 8002836:	2d08      	cmp	r5, #8
 8002838:	f000 8226 	beq.w	8002c88 <HAL_UART_Init+0xad0>
 800283c:	2d09      	cmp	r5, #9
 800283e:	f000 823f 	beq.w	8002cc0 <HAL_UART_Init+0xb08>
 8002842:	2d0a      	cmp	r5, #10
 8002844:	f000 8241 	beq.w	8002cca <HAL_UART_Init+0xb12>
 8002848:	2d0b      	cmp	r5, #11
 800284a:	bf14      	ite	ne
 800284c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002850:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002854:	e7d0      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	00f42400 	.word	0x00f42400
 8002860:	aaaaaaab 	.word	0xaaaaaaab
 8002864:	01e84800 	.word	0x01e84800
 8002868:	0001e848 	.word	0x0001e848
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800286c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800286e:	b303      	cbz	r3, 80028b2 <HAL_UART_Init+0x6fa>
 8002870:	2b01      	cmp	r3, #1
 8002872:	f000 8169 	beq.w	8002b48 <HAL_UART_Init+0x990>
 8002876:	2b02      	cmp	r3, #2
 8002878:	f000 8192 	beq.w	8002ba0 <HAL_UART_Init+0x9e8>
 800287c:	2b03      	cmp	r3, #3
 800287e:	f000 81e6 	beq.w	8002c4e <HAL_UART_Init+0xa96>
 8002882:	2b04      	cmp	r3, #4
 8002884:	f000 81ea 	beq.w	8002c5c <HAL_UART_Init+0xaa4>
 8002888:	2b05      	cmp	r3, #5
 800288a:	f000 822a 	beq.w	8002ce2 <HAL_UART_Init+0xb2a>
 800288e:	2b06      	cmp	r3, #6
 8002890:	f000 8224 	beq.w	8002cdc <HAL_UART_Init+0xb24>
 8002894:	2b07      	cmp	r3, #7
 8002896:	f000 821d 	beq.w	8002cd4 <HAL_UART_Init+0xb1c>
 800289a:	2b08      	cmp	r3, #8
 800289c:	f000 823c 	beq.w	8002d18 <HAL_UART_Init+0xb60>
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	f000 824f 	beq.w	8002d44 <HAL_UART_Init+0xb8c>
 80028a6:	2b0a      	cmp	r3, #10
 80028a8:	f000 8248 	beq.w	8002d3c <HAL_UART_Init+0xb84>
 80028ac:	2b0b      	cmp	r3, #11
 80028ae:	f000 8241 	beq.w	8002d34 <HAL_UART_Init+0xb7c>
 80028b2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 80028b6:	2600      	movs	r6, #0
 80028b8:	0853      	lsrs	r3, r2, #1
 80028ba:	18e8      	adds	r0, r5, r3
 80028bc:	f146 0100 	adc.w	r1, r6, #0
 80028c0:	2300      	movs	r3, #0
 80028c2:	f7fd fca9 	bl	8000218 <__aeabi_uldivmod>
 80028c6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028ca:	4bbb      	ldr	r3, [pc, #748]	; (8002bb8 <HAL_UART_Init+0xa00>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f63f acd2 	bhi.w	8002276 <HAL_UART_Init+0xbe>
          huart->Instance->BRR = usartdiv;
 80028d2:	6821      	ldr	r1, [r4, #0]
  huart->RxISR = NULL;
 80028d4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80028d6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80028da:	60c8      	str	r0, [r1, #12]
  huart->RxISR = NULL;
 80028dc:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80028e0:	6723      	str	r3, [r4, #112]	; 0x70
 80028e2:	e57a      	b.n	80023da <HAL_UART_Init+0x222>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e6:	b303      	cbz	r3, 800292a <HAL_UART_Init+0x772>
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f000 8131 	beq.w	8002b50 <HAL_UART_Init+0x998>
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	f000 8184 	beq.w	8002bfc <HAL_UART_Init+0xa44>
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	f000 81a6 	beq.w	8002c46 <HAL_UART_Init+0xa8e>
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	f000 81c1 	beq.w	8002c82 <HAL_UART_Init+0xaca>
 8002900:	2b05      	cmp	r3, #5
 8002902:	f000 8203 	beq.w	8002d0c <HAL_UART_Init+0xb54>
 8002906:	2b06      	cmp	r3, #6
 8002908:	f000 81fc 	beq.w	8002d04 <HAL_UART_Init+0xb4c>
 800290c:	2b07      	cmp	r3, #7
 800290e:	f000 81f6 	beq.w	8002cfe <HAL_UART_Init+0xb46>
 8002912:	2b08      	cmp	r3, #8
 8002914:	f000 8208 	beq.w	8002d28 <HAL_UART_Init+0xb70>
 8002918:	2b09      	cmp	r3, #9
 800291a:	f000 821a 	beq.w	8002d52 <HAL_UART_Init+0xb9a>
 800291e:	2b0a      	cmp	r3, #10
 8002920:	f000 8214 	beq.w	8002d4c <HAL_UART_Init+0xb94>
 8002924:	2b0b      	cmp	r3, #11
 8002926:	f000 8202 	beq.w	8002d2e <HAL_UART_Init+0xb76>
 800292a:	4da4      	ldr	r5, [pc, #656]	; (8002bbc <HAL_UART_Init+0xa04>)
 800292c:	2600      	movs	r6, #0
 800292e:	e7c3      	b.n	80028b8 <HAL_UART_Init+0x700>
            pclk = HAL_RCC_GetPCLK1Freq();
 8002930:	f7ff fa3c 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002936:	2100      	movs	r1, #0
 8002938:	b30b      	cbz	r3, 800297e <HAL_UART_Init+0x7c6>
 800293a:	2b01      	cmp	r3, #1
 800293c:	f000 80d9 	beq.w	8002af2 <HAL_UART_Init+0x93a>
 8002940:	2b02      	cmp	r3, #2
 8002942:	f000 80fa 	beq.w	8002b3a <HAL_UART_Init+0x982>
 8002946:	2b03      	cmp	r3, #3
 8002948:	f000 8120 	beq.w	8002b8c <HAL_UART_Init+0x9d4>
 800294c:	2b04      	cmp	r3, #4
 800294e:	f000 8124 	beq.w	8002b9a <HAL_UART_Init+0x9e2>
 8002952:	2b05      	cmp	r3, #5
 8002954:	f000 81ad 	beq.w	8002cb2 <HAL_UART_Init+0xafa>
 8002958:	2b06      	cmp	r3, #6
 800295a:	f000 81a5 	beq.w	8002ca8 <HAL_UART_Init+0xaf0>
 800295e:	2b07      	cmp	r3, #7
 8002960:	f000 819f 	beq.w	8002ca2 <HAL_UART_Init+0xaea>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f000 81d4 	beq.w	8002d12 <HAL_UART_Init+0xb5a>
 800296a:	2b09      	cmp	r3, #9
 800296c:	f000 81f7 	beq.w	8002d5e <HAL_UART_Init+0xba6>
 8002970:	2b0a      	cmp	r3, #10
 8002972:	f000 81f1 	beq.w	8002d58 <HAL_UART_Init+0xba0>
 8002976:	2b0b      	cmp	r3, #11
 8002978:	bf04      	itt	eq
 800297a:	0a00      	lsreq	r0, r0, #8
 800297c:	2100      	moveq	r1, #0
 800297e:	6862      	ldr	r2, [r4, #4]
 8002980:	020f      	lsls	r7, r1, #8
 8002982:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002986:	0206      	lsls	r6, r0, #8
 8002988:	0850      	lsrs	r0, r2, #1
 800298a:	eb16 0b00 	adds.w	fp, r6, r0
 800298e:	f147 0c00 	adc.w	ip, r7, #0
 8002992:	4658      	mov	r0, fp
 8002994:	4661      	mov	r1, ip
 8002996:	2300      	movs	r3, #0
 8002998:	f7fd fc3e 	bl	8000218 <__aeabi_uldivmod>
 800299c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80029a0:	e793      	b.n	80028ca <HAL_UART_Init+0x712>
            pclk = HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff f9cb 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80029a6:	e7c5      	b.n	8002934 <HAL_UART_Init+0x77c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029a8:	b34d      	cbz	r5, 80029fe <HAL_UART_Init+0x846>
 80029aa:	2d01      	cmp	r5, #1
 80029ac:	d049      	beq.n	8002a42 <HAL_UART_Init+0x88a>
 80029ae:	2d02      	cmp	r5, #2
 80029b0:	d063      	beq.n	8002a7a <HAL_UART_Init+0x8c2>
 80029b2:	2d03      	cmp	r5, #3
 80029b4:	f000 8083 	beq.w	8002abe <HAL_UART_Init+0x906>
 80029b8:	2d04      	cmp	r5, #4
 80029ba:	f000 808e 	beq.w	8002ada <HAL_UART_Init+0x922>
 80029be:	2d05      	cmp	r5, #5
 80029c0:	f000 80a9 	beq.w	8002b16 <HAL_UART_Init+0x95e>
 80029c4:	2d06      	cmp	r5, #6
 80029c6:	f000 80c6 	beq.w	8002b56 <HAL_UART_Init+0x99e>
 80029ca:	2d07      	cmp	r5, #7
 80029cc:	f000 8119 	beq.w	8002c02 <HAL_UART_Init+0xa4a>
 80029d0:	2d08      	cmp	r5, #8
 80029d2:	f000 812b 	beq.w	8002c2c <HAL_UART_Init+0xa74>
 80029d6:	2d09      	cmp	r5, #9
 80029d8:	f000 814f 	beq.w	8002c7a <HAL_UART_Init+0xac2>
 80029dc:	2d0a      	cmp	r5, #10
 80029de:	f000 818a 	beq.w	8002cf6 <HAL_UART_Init+0xb3e>
 80029e2:	4b77      	ldr	r3, [pc, #476]	; (8002bc0 <HAL_UART_Init+0xa08>)
 80029e4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80029e8:	2d0b      	cmp	r5, #11
 80029ea:	bf18      	it	ne
 80029ec:	4618      	movne	r0, r3
 80029ee:	2302      	movs	r3, #2
 80029f0:	e494      	b.n	800231c <HAL_UART_Init+0x164>
 80029f2:	0840      	lsrs	r0, r0, #1
 80029f4:	e4d8      	b.n	80023a8 <HAL_UART_Init+0x1f0>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029f6:	2308      	movs	r3, #8
 80029f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029fc:	e48e      	b.n	800231c <HAL_UART_Init+0x164>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029fe:	2302      	movs	r3, #2
 8002a00:	486f      	ldr	r0, [pc, #444]	; (8002bc0 <HAL_UART_Init+0xa08>)
 8002a02:	e48b      	b.n	800231c <HAL_UART_Init+0x164>
 8002a04:	0840      	lsrs	r0, r0, #1
 8002a06:	e61b      	b.n	8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a08:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_UART_Init+0xa0c>)
 8002a0a:	e6f5      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a10:	e6f2      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_UART_Init+0xa10>)
 8002a14:	fba3 3000 	umull	r3, r0, r3, r0
 8002a18:	08c0      	lsrs	r0, r0, #3
 8002a1a:	e4c5      	b.n	80023a8 <HAL_UART_Init+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a1c:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_UART_Init+0xa14>)
 8002a1e:	e6a7      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a24:	e6a4      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002a26:	0880      	lsrs	r0, r0, #2
 8002a28:	e60a      	b.n	8002640 <HAL_UART_Init+0x488>
 8002a2a:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <HAL_UART_Init+0xa18>)
 8002a2c:	fba3 3000 	umull	r3, r0, r3, r0
 8002a30:	0880      	lsrs	r0, r0, #2
 8002a32:	e696      	b.n	8002762 <HAL_UART_Init+0x5aa>
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_UART_Init+0xa18>)
 8002a36:	fba3 3000 	umull	r3, r0, r3, r0
 8002a3a:	0880      	lsrs	r0, r0, #2
 8002a3c:	e662      	b.n	8002704 <HAL_UART_Init+0x54c>
 8002a3e:	0840      	lsrs	r0, r0, #1
 8002a40:	e660      	b.n	8002704 <HAL_UART_Init+0x54c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a42:	2302      	movs	r3, #2
 8002a44:	4861      	ldr	r0, [pc, #388]	; (8002bcc <HAL_UART_Init+0xa14>)
 8002a46:	e469      	b.n	800231c <HAL_UART_Init+0x164>
 8002a48:	0840      	lsrs	r0, r0, #1
 8002a4a:	e68a      	b.n	8002762 <HAL_UART_Init+0x5aa>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a52:	e463      	b.n	800231c <HAL_UART_Init+0x164>
 8002a54:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <HAL_UART_Init+0xa18>)
 8002a56:	fba3 2300 	umull	r2, r3, r3, r0
 8002a5a:	0898      	lsrs	r0, r3, #2
 8002a5c:	e5f0      	b.n	8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_UART_Init+0xa1c>)
 8002a60:	e686      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a66:	e683      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a68:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <HAL_UART_Init+0xa08>)
 8002a6a:	e6c5      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a70:	e6c2      	b.n	80027f8 <HAL_UART_Init+0x640>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a72:	2308      	movs	r3, #8
 8002a74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a78:	e450      	b.n	800231c <HAL_UART_Init+0x164>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	4855      	ldr	r0, [pc, #340]	; (8002bd4 <HAL_UART_Init+0xa1c>)
 8002a7e:	e44d      	b.n	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a80:	f241 5355 	movw	r3, #5461	; 0x1555
 8002a84:	e674      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002a86:	08c0      	lsrs	r0, r0, #3
 8002a88:	e5da      	b.n	8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a8a:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_UART_Init+0xa20>)
 8002a8c:	e670      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002a8e:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_UART_Init+0xa18>)
 8002a90:	fba3 3000 	umull	r3, r0, r3, r0
 8002a94:	08c0      	lsrs	r0, r0, #3
 8002a96:	e487      	b.n	80023a8 <HAL_UART_Init+0x1f0>
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_UART_Init+0xa10>)
 8002a9a:	fba3 3000 	umull	r3, r0, r3, r0
 8002a9e:	08c0      	lsrs	r0, r0, #3
 8002aa0:	e630      	b.n	8002704 <HAL_UART_Init+0x54c>
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_UART_Init+0xa10>)
 8002aa4:	fba3 3000 	umull	r3, r0, r3, r0
 8002aa8:	08c0      	lsrs	r0, r0, #3
 8002aaa:	e65a      	b.n	8002762 <HAL_UART_Init+0x5aa>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002aac:	2308      	movs	r3, #8
 8002aae:	f241 5055 	movw	r0, #5461	; 0x1555
 8002ab2:	e433      	b.n	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <HAL_UART_Init+0xa14>)
 8002ab6:	e69f      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002abc:	e69c      	b.n	80027f8 <HAL_UART_Init+0x640>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002abe:	2302      	movs	r3, #2
 8002ac0:	4845      	ldr	r0, [pc, #276]	; (8002bd8 <HAL_UART_Init+0xa20>)
 8002ac2:	e42b      	b.n	800231c <HAL_UART_Init+0x164>
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aca:	e5b9      	b.n	8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	e64e      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad2:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <HAL_UART_Init+0xa24>)
 8002ad4:	e64c      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002ad6:	0900      	lsrs	r0, r0, #4
 8002ad8:	e466      	b.n	80023a8 <HAL_UART_Init+0x1f0>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ada:	2302      	movs	r3, #2
 8002adc:	483f      	ldr	r0, [pc, #252]	; (8002bdc <HAL_UART_Init+0xa24>)
 8002ade:	e41d      	b.n	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_UART_Init+0xa28>)
 8002ae2:	e689      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae4:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8002ae8:	e686      	b.n	80027f8 <HAL_UART_Init+0x640>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002aea:	2308      	movs	r3, #8
 8002aec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002af0:	e414      	b.n	800231c <HAL_UART_Init+0x164>
 8002af2:	0849      	lsrs	r1, r1, #1
 8002af4:	ea4f 0030 	mov.w	r0, r0, rrx
 8002af8:	e741      	b.n	800297e <HAL_UART_Init+0x7c6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_UART_Init+0xa2c>)
 8002afc:	e638      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002afe:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002b02:	e635      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002b04:	0940      	lsrs	r0, r0, #5
 8002b06:	e44f      	b.n	80023a8 <HAL_UART_Init+0x1f0>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b0e:	e597      	b.n	8002640 <HAL_UART_Init+0x488>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b14:	e670      	b.n	80027f8 <HAL_UART_Init+0x640>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b16:	2302      	movs	r3, #2
 8002b18:	4832      	ldr	r0, [pc, #200]	; (8002be4 <HAL_UART_Init+0xa2c>)
 8002b1a:	f7ff bbff 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_UART_Init+0xa1c>)
 8002b20:	e66a      	b.n	80027f8 <HAL_UART_Init+0x640>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b22:	2308      	movs	r3, #8
 8002b24:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002b28:	f7ff bbf8 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_UART_Init+0xa30>)
 8002b2e:	e61f      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b30:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002b34:	e61c      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002b36:	0900      	lsrs	r0, r0, #4
 8002b38:	e582      	b.n	8002640 <HAL_UART_Init+0x488>
 8002b3a:	0880      	lsrs	r0, r0, #2
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	e71e      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002b40:	230c      	movs	r3, #12
 8002b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b46:	e60c      	b.n	8002762 <HAL_UART_Init+0x5aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b48:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	e6b3      	b.n	80028b8 <HAL_UART_Init+0x700>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b50:	4d26      	ldr	r5, [pc, #152]	; (8002bec <HAL_UART_Init+0xa34>)
 8002b52:	2600      	movs	r6, #0
 8002b54:	e6b0      	b.n	80028b8 <HAL_UART_Init+0x700>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b56:	2302      	movs	r3, #2
 8002b58:	4823      	ldr	r0, [pc, #140]	; (8002be8 <HAL_UART_Init+0xa30>)
 8002b5a:	f7ff bbdf 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_UART_Init+0xa38>)
 8002b60:	e64a      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b62:	f641 1398 	movw	r3, #6552	; 0x1998
 8002b66:	e647      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b6e:	e5c9      	b.n	8002704 <HAL_UART_Init+0x54c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b70:	2308      	movs	r3, #8
 8002b72:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002b76:	f7ff bbd1 	b.w	800231c <HAL_UART_Init+0x164>
 8002b7a:	09c0      	lsrs	r0, r0, #7
 8002b7c:	e414      	b.n	80023a8 <HAL_UART_Init+0x1f0>
 8002b7e:	0980      	lsrs	r0, r0, #6
 8002b80:	e412      	b.n	80023a8 <HAL_UART_Init+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_UART_Init+0xa3c>)
 8002b84:	e5f4      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8a:	e5f1      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f7fd fb42 	bl	8000218 <__aeabi_uldivmod>
 8002b94:	e6f3      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002b96:	0940      	lsrs	r0, r0, #5
 8002b98:	e552      	b.n	8002640 <HAL_UART_Init+0x488>
 8002b9a:	08c0      	lsrs	r0, r0, #3
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	e6ee      	b.n	800297e <HAL_UART_Init+0x7c6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ba0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e687      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002ba8:	0900      	lsrs	r0, r0, #4
 8002baa:	e5da      	b.n	8002762 <HAL_UART_Init+0x5aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_UART_Init+0xa40>)
 8002bae:	e5df      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	e5dc      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002bb6:	bf00      	nop
 8002bb8:	000ffcff 	.word	0x000ffcff
 8002bbc:	f4240000 	.word	0xf4240000
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	01e84800 	.word	0x01e84800
 8002bc8:	cccccccd 	.word	0xcccccccd
 8002bcc:	007a1200 	.word	0x007a1200
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
 8002bd4:	003d0900 	.word	0x003d0900
 8002bd8:	0028b0aa 	.word	0x0028b0aa
 8002bdc:	001e8480 	.word	0x001e8480
 8002be0:	00516154 	.word	0x00516154
 8002be4:	00186a00 	.word	0x00186a00
 8002be8:	00145855 	.word	0x00145855
 8002bec:	7a120000 	.word	0x7a120000
 8002bf0:	0030d400 	.word	0x0030d400
 8002bf4:	000f4240 	.word	0x000f4240
 8002bf8:	0007a120 	.word	0x0007a120
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfc:	4d5e      	ldr	r5, [pc, #376]	; (8002d78 <HAL_UART_Init+0xbc0>)
 8002bfe:	2600      	movs	r6, #0
 8002c00:	e65a      	b.n	80028b8 <HAL_UART_Init+0x700>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c02:	2302      	movs	r3, #2
 8002c04:	485d      	ldr	r0, [pc, #372]	; (8002d7c <HAL_UART_Init+0xbc4>)
 8002c06:	f7ff bb89 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c0a:	f241 5354 	movw	r3, #5460	; 0x1554
 8002c0e:	e5f3      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c10:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_UART_Init+0xbc8>)
 8002c12:	e5f1      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002c14:	0900      	lsrs	r0, r0, #4
 8002c16:	e575      	b.n	8002704 <HAL_UART_Init+0x54c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c18:	2308      	movs	r3, #8
 8002c1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c1e:	f7ff bb7d 	b.w	800231c <HAL_UART_Init+0x164>
 8002c22:	462b      	mov	r3, r5
 8002c24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c28:	f7ff bb78 	b.w	800231c <HAL_UART_Init+0x164>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	4855      	ldr	r0, [pc, #340]	; (8002d84 <HAL_UART_Init+0xbcc>)
 8002c30:	f7ff bb74 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c34:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_UART_Init+0xbd0>)
 8002c36:	e5df      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002c38:	0940      	lsrs	r0, r0, #5
 8002c3a:	e563      	b.n	8002704 <HAL_UART_Init+0x54c>
 8002c3c:	0940      	lsrs	r0, r0, #5
 8002c3e:	e590      	b.n	8002762 <HAL_UART_Init+0x5aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c44:	e5d8      	b.n	80027f8 <HAL_UART_Init+0x640>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c46:	a648      	add	r6, pc, #288	; (adr r6, 8002d68 <HAL_UART_Init+0xbb0>)
 8002c48:	e9d6 5600 	ldrd	r5, r6, [r6]
 8002c4c:	e634      	b.n	80028b8 <HAL_UART_Init+0x700>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c4e:	4d4f      	ldr	r5, [pc, #316]	; (8002d8c <HAL_UART_Init+0xbd4>)
 8002c50:	2600      	movs	r6, #0
 8002c52:	e631      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002c54:	09c0      	lsrs	r0, r0, #7
 8002c56:	e4f3      	b.n	8002640 <HAL_UART_Init+0x488>
 8002c58:	0980      	lsrs	r0, r0, #6
 8002c5a:	e4f1      	b.n	8002640 <HAL_UART_Init+0x488>
 8002c5c:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8002c60:	2600      	movs	r6, #0
 8002c62:	e629      	b.n	80028b8 <HAL_UART_Init+0x700>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c64:	2308      	movs	r3, #8
 8002c66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c6a:	f7ff bb57 	b.w	800231c <HAL_UART_Init+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <HAL_UART_Init+0xbd8>)
 8002c70:	e57e      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002c72:	4b48      	ldr	r3, [pc, #288]	; (8002d94 <HAL_UART_Init+0xbdc>)
 8002c74:	e57c      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002c76:	0980      	lsrs	r0, r0, #6
 8002c78:	e544      	b.n	8002704 <HAL_UART_Init+0x54c>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	4845      	ldr	r0, [pc, #276]	; (8002d94 <HAL_UART_Init+0xbdc>)
 8002c7e:	f7ff bb4d 	b.w	800231c <HAL_UART_Init+0x164>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c82:	4d45      	ldr	r5, [pc, #276]	; (8002d98 <HAL_UART_Init+0xbe0>)
 8002c84:	2600      	movs	r6, #0
 8002c86:	e617      	b.n	80028b8 <HAL_UART_Init+0x700>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c8c:	e5b4      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002c8e:	0980      	lsrs	r0, r0, #6
 8002c90:	e567      	b.n	8002762 <HAL_UART_Init+0x5aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c96:	e56b      	b.n	8002770 <HAL_UART_Init+0x5b8>
 8002c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9c:	e568      	b.n	8002770 <HAL_UART_Init+0x5b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_UART_Init+0xbc4>)
 8002ca0:	e5aa      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002ca2:	0900      	lsrs	r0, r0, #4
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	e66a      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002ca8:	220c      	movs	r2, #12
 8002caa:	2300      	movs	r3, #0
 8002cac:	f7fd fab4 	bl	8000218 <__aeabi_uldivmod>
 8002cb0:	e665      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f7fd faaf 	bl	8000218 <__aeabi_uldivmod>
 8002cba:	e660      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_UART_Init+0xbcc>)
 8002cbe:	e59b      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc4:	e598      	b.n	80027f8 <HAL_UART_Init+0x640>
 8002cc6:	09c0      	lsrs	r0, r0, #7
 8002cc8:	e54b      	b.n	8002762 <HAL_UART_Init+0x5aa>
 8002cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cce:	e593      	b.n	80027f8 <HAL_UART_Init+0x640>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_UART_Init+0xbdc>)
 8002cd2:	e591      	b.n	80027f8 <HAL_UART_Init+0x640>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd4:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8002cd8:	2600      	movs	r6, #0
 8002cda:	e5ed      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002cdc:	4d2f      	ldr	r5, [pc, #188]	; (8002d9c <HAL_UART_Init+0xbe4>)
 8002cde:	2600      	movs	r6, #0
 8002ce0:	e5ea      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002ce2:	4d2f      	ldr	r5, [pc, #188]	; (8002da0 <HAL_UART_Init+0xbe8>)
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	e5e7      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002ce8:	09c0      	lsrs	r0, r0, #7
 8002cea:	e50b      	b.n	8002704 <HAL_UART_Init+0x54c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cec:	2308      	movs	r3, #8
 8002cee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cf2:	f7ff bb13 	b.w	800231c <HAL_UART_Init+0x164>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	4825      	ldr	r0, [pc, #148]	; (8002d90 <HAL_UART_Init+0xbd8>)
 8002cfa:	f7ff bb0f 	b.w	800231c <HAL_UART_Init+0x164>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cfe:	4d29      	ldr	r5, [pc, #164]	; (8002da4 <HAL_UART_Init+0xbec>)
 8002d00:	2600      	movs	r6, #0
 8002d02:	e5d9      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d04:	a61a      	add	r6, pc, #104	; (adr r6, 8002d70 <HAL_UART_Init+0xbb8>)
 8002d06:	e9d6 5600 	ldrd	r5, r6, [r6]
 8002d0a:	e5d5      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d0c:	4d26      	ldr	r5, [pc, #152]	; (8002da8 <HAL_UART_Init+0xbf0>)
 8002d0e:	2600      	movs	r6, #0
 8002d10:	e5d2      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d12:	0940      	lsrs	r0, r0, #5
 8002d14:	2100      	movs	r1, #0
 8002d16:	e632      	b.n	800297e <HAL_UART_Init+0x7c6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d18:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	e5cb      	b.n	80028b8 <HAL_UART_Init+0x700>
        ret = HAL_ERROR;
 8002d20:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f7ff bb47 	b.w	80023b6 <HAL_UART_Init+0x1fe>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d28:	4d20      	ldr	r5, [pc, #128]	; (8002dac <HAL_UART_Init+0xbf4>)
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	e5c4      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d2e:	4d20      	ldr	r5, [pc, #128]	; (8002db0 <HAL_UART_Init+0xbf8>)
 8002d30:	2600      	movs	r6, #0
 8002d32:	e5c1      	b.n	80028b8 <HAL_UART_Init+0x700>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d34:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8002d38:	2600      	movs	r6, #0
 8002d3a:	e5bd      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d3c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8002d40:	2600      	movs	r6, #0
 8002d42:	e5b9      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d44:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8002d48:	2600      	movs	r6, #0
 8002d4a:	e5b5      	b.n	80028b8 <HAL_UART_Init+0x700>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d4c:	4d19      	ldr	r5, [pc, #100]	; (8002db4 <HAL_UART_Init+0xbfc>)
 8002d4e:	2600      	movs	r6, #0
 8002d50:	e5b2      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d52:	4d19      	ldr	r5, [pc, #100]	; (8002db8 <HAL_UART_Init+0xc00>)
 8002d54:	2600      	movs	r6, #0
 8002d56:	e5af      	b.n	80028b8 <HAL_UART_Init+0x700>
 8002d58:	09c0      	lsrs	r0, r0, #7
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	e60f      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002d5e:	0980      	lsrs	r0, r0, #6
 8002d60:	2100      	movs	r1, #0
 8002d62:	e60c      	b.n	800297e <HAL_UART_Init+0x7c6>
 8002d64:	f3af 8000 	nop.w
 8002d68:	28b0aa00 	.word	0x28b0aa00
 8002d6c:	00000000 	.word	0x00000000
 8002d70:	14585500 	.word	0x14585500
 8002d74:	00000000 	.word	0x00000000
 8002d78:	3d090000 	.word	0x3d090000
 8002d7c:	000f4240 	.word	0x000f4240
 8002d80:	0028b0aa 	.word	0x0028b0aa
 8002d84:	0007a120 	.word	0x0007a120
 8002d88:	001e8480 	.word	0x001e8480
 8002d8c:	00155500 	.word	0x00155500
 8002d90:	0001e848 	.word	0x0001e848
 8002d94:	0003d090 	.word	0x0003d090
 8002d98:	1e848000 	.word	0x1e848000
 8002d9c:	000aaa00 	.word	0x000aaa00
 8002da0:	000ccc00 	.word	0x000ccc00
 8002da4:	0f424000 	.word	0x0f424000
 8002da8:	186a0000 	.word	0x186a0000
 8002dac:	07a12000 	.word	0x07a12000
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	01e84800 	.word	0x01e84800
 8002db8:	03d09000 	.word	0x03d09000

08002dbc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dbc:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8002dc0:	2a01      	cmp	r2, #1
 8002dc2:	d017      	beq.n	8002df4 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8002dc4:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dc6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	2124      	movs	r1, #36	; 0x24
 8002dca:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8002dce:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dd0:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dd2:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dd4:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002dd6:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8002dda:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8002dde:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8002de0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002de2:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002de4:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002de6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8002de8:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002dec:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8002df0:	bc30      	pop	{r4, r5}
 8002df2:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002df4:	2002      	movs	r0, #2
}
 8002df6:	4770      	bx	lr

08002df8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002df8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	d049      	beq.n	8002e94 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8002e00:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8002e02:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e04:	681a      	ldr	r2, [r3, #0]
{
 8002e06:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e0c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e0e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e10:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8002e12:	f020 0001 	bic.w	r0, r0, #1
 8002e16:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e18:	6890      	ldr	r0, [r2, #8]
 8002e1a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
{
 8002e1e:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e20:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002e22:	481d      	ldr	r0, [pc, #116]	; (8002e98 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e24:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002e26:	f240 1107 	movw	r1, #263	; 0x107
 8002e2a:	9000      	str	r0, [sp, #0]
 8002e2c:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002e2e:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8002e32:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8002e36:	f200 2006 	addw	r0, r0, #518	; 0x206
 8002e3a:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8002e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e42:	b325      	cbz	r5, 8002e8e <HAL_UARTEx_SetTxFifoThreshold+0x96>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e44:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e46:	6896      	ldr	r6, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e48:	a904      	add	r1, sp, #16
 8002e4a:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8002e4e:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e50:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e54:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e58:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e5c:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e60:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e64:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e66:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002e68:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002e6c:	fb90 f0f5 	sdiv	r0, r0, r5
 8002e70:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8002e74:	2100      	movs	r1, #0
 8002e76:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8002e7a:	2520      	movs	r5, #32
  return HAL_OK;
 8002e7c:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e7e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002e80:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002e84:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8002e88:	b004      	add	sp, #16
 8002e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e8c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8002e8e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8002e90:	4608      	mov	r0, r1
 8002e92:	e7ed      	b.n	8002e70 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8002e94:	2002      	movs	r0, #2
}
 8002e96:	4770      	bx	lr
 8002e98:	03010101 	.word	0x03010101

08002e9c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8002e9c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8002ea0:	2a01      	cmp	r2, #1
 8002ea2:	d049      	beq.n	8002f38 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8002ea4:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8002ea6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ea8:	681a      	ldr	r2, [r3, #0]
{
 8002eaa:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002eb0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002eb2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002eb4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8002eb6:	f020 0001 	bic.w	r0, r0, #1
 8002eba:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ebc:	6890      	ldr	r0, [r2, #8]
 8002ebe:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
{
 8002ec2:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ec4:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002ec6:	481d      	ldr	r0, [pc, #116]	; (8002f3c <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ec8:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002eca:	f240 1107 	movw	r1, #263	; 0x107
 8002ece:	9000      	str	r0, [sp, #0]
 8002ed0:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002ed2:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8002ed6:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8002eda:	f200 2006 	addw	r0, r0, #518	; 0x206
 8002ede:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8002ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ee6:	b325      	cbz	r5, 8002f32 <HAL_UARTEx_SetRxFifoThreshold+0x96>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ee8:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eea:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002eec:	a904      	add	r1, sp, #16
 8002eee:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8002ef2:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002ef4:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002ef8:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002efc:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002f00:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002f04:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002f08:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002f0a:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002f0c:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002f10:	fb90 f0f5 	sdiv	r0, r0, r5
 8002f14:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8002f1e:	2520      	movs	r5, #32
  return HAL_OK;
 8002f20:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f22:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002f24:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8002f28:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f30:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8002f32:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8002f34:	4608      	mov	r0, r1
 8002f36:	e7ed      	b.n	8002f14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8002f38:	2002      	movs	r0, #2
}
 8002f3a:	4770      	bx	lr
 8002f3c:	03010101 	.word	0x03010101

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	4e0d      	ldr	r6, [pc, #52]	; (8002f78 <__libc_init_array+0x38>)
 8002f44:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <__libc_init_array+0x3c>)
 8002f46:	1ba4      	subs	r4, r4, r6
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	2500      	movs	r5, #0
 8002f4c:	42a5      	cmp	r5, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	4e0b      	ldr	r6, [pc, #44]	; (8002f80 <__libc_init_array+0x40>)
 8002f52:	4c0c      	ldr	r4, [pc, #48]	; (8002f84 <__libc_init_array+0x44>)
 8002f54:	f000 f820 	bl	8002f98 <_init>
 8002f58:	1ba4      	subs	r4, r4, r6
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	2500      	movs	r5, #0
 8002f5e:	42a5      	cmp	r5, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f68:	4798      	blx	r3
 8002f6a:	3501      	adds	r5, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f72:	4798      	blx	r3
 8002f74:	3501      	adds	r5, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	08002ff4 	.word	0x08002ff4
 8002f7c:	08002ff4 	.word	0x08002ff4
 8002f80:	08002ff4 	.word	0x08002ff4
 8002f84:	08002ff8 	.word	0x08002ff8

08002f88 <memset>:
 8002f88:	4402      	add	r2, r0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
